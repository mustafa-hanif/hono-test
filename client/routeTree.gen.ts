/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as AdminUserIdLayoutImport } from './routes/admin/$userId/_layout'
import { Route as AdminUserIdLayoutUserImport } from './routes/admin/$userId/_layout.user'

// Create Virtual Routes

const AdminUserIdImport = createFileRoute('/admin/$userId')()

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserIdRoute = AdminUserIdImport.update({
  id: '/admin/$userId',
  path: '/admin/$userId',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserIdLayoutRoute = AdminUserIdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AdminUserIdRoute,
} as any)

const AdminUserIdLayoutUserRoute = AdminUserIdLayoutUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => AdminUserIdLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/admin/$userId': {
      id: '/admin/$userId'
      path: '/admin/$userId'
      fullPath: '/admin/$userId'
      preLoaderRoute: typeof AdminUserIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/$userId/_layout': {
      id: '/admin/$userId/_layout'
      path: '/admin/$userId'
      fullPath: '/admin/$userId'
      preLoaderRoute: typeof AdminUserIdLayoutImport
      parentRoute: typeof AdminUserIdRoute
    }
    '/admin/$userId/_layout/user': {
      id: '/admin/$userId/_layout/user'
      path: '/user'
      fullPath: '/admin/$userId/user'
      preLoaderRoute: typeof AdminUserIdLayoutUserImport
      parentRoute: typeof AdminUserIdLayoutImport
    }
  }
}

// Create and export the route tree

interface AdminUserIdLayoutRouteChildren {
  AdminUserIdLayoutUserRoute: typeof AdminUserIdLayoutUserRoute
}

const AdminUserIdLayoutRouteChildren: AdminUserIdLayoutRouteChildren = {
  AdminUserIdLayoutUserRoute: AdminUserIdLayoutUserRoute,
}

const AdminUserIdLayoutRouteWithChildren =
  AdminUserIdLayoutRoute._addFileChildren(AdminUserIdLayoutRouteChildren)

interface AdminUserIdRouteChildren {
  AdminUserIdLayoutRoute: typeof AdminUserIdLayoutRouteWithChildren
}

const AdminUserIdRouteChildren: AdminUserIdRouteChildren = {
  AdminUserIdLayoutRoute: AdminUserIdLayoutRouteWithChildren,
}

const AdminUserIdRouteWithChildren = AdminUserIdRoute._addFileChildren(
  AdminUserIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/$userId': typeof AdminUserIdLayoutRouteWithChildren
  '/admin/$userId/user': typeof AdminUserIdLayoutUserRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/$userId': typeof AdminUserIdLayoutRouteWithChildren
  '/admin/$userId/user': typeof AdminUserIdLayoutUserRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/$userId': typeof AdminUserIdRouteWithChildren
  '/admin/$userId/_layout': typeof AdminUserIdLayoutRouteWithChildren
  '/admin/$userId/_layout/user': typeof AdminUserIdLayoutUserRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/admin/$userId'
    | '/admin/$userId/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/admin/$userId'
    | '/admin/$userId/user'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/admin/$userId'
    | '/admin/$userId/_layout'
    | '/admin/$userId/_layout/user'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AdminUserIdRoute: typeof AdminUserIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AdminUserIdRoute: AdminUserIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/register",
        "/admin/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/admin/$userId": {
      "filePath": "admin/$userId",
      "children": [
        "/admin/$userId/_layout"
      ]
    },
    "/admin/$userId/_layout": {
      "filePath": "admin/$userId/_layout.tsx",
      "parent": "/admin/$userId",
      "children": [
        "/admin/$userId/_layout/user"
      ]
    },
    "/admin/$userId/_layout/user": {
      "filePath": "admin/$userId/_layout.user.tsx",
      "parent": "/admin/$userId/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
