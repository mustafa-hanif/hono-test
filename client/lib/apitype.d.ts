/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/competition/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Competition */
        post: operations["createCompetition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Competition */
        post: operations["createManyCompetition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Competition */
        get: operations["findUniqueCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Competition matching the given condition */
        get: operations["findFirstCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Competition */
        get: operations["findManyCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Competition */
        patch: operations["updateCompetition"];
        trace?: never;
    };
    "/competition/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Competitions matching the given condition */
        patch: operations["updateManyCompetition"];
        trace?: never;
    };
    "/competition/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Competition */
        post: operations["upsertCompetition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Competition */
        delete: operations["deleteCompetition"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Competitions matching the given condition */
        delete: operations["deleteManyCompetition"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Competition */
        get: operations["countCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Competitions */
        get: operations["aggregateCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competition/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Competitions by fields */
        get: operations["groupByCompetition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Days */
        post: operations["createDays"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Days */
        post: operations["createManyDays"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Days */
        get: operations["findUniqueDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Days matching the given condition */
        get: operations["findFirstDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Days */
        get: operations["findManyDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Days */
        patch: operations["updateDays"];
        trace?: never;
    };
    "/days/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Dayss matching the given condition */
        patch: operations["updateManyDays"];
        trace?: never;
    };
    "/days/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Days */
        post: operations["upsertDays"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Days */
        delete: operations["deleteDays"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Dayss matching the given condition */
        delete: operations["deleteManyDays"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Days */
        get: operations["countDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Dayss */
        get: operations["aggregateDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/days/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Dayss by fields */
        get: operations["groupByDays"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Headings */
        post: operations["createHeadings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Headings */
        post: operations["createManyHeadings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Headings */
        get: operations["findUniqueHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Headings matching the given condition */
        get: operations["findFirstHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Headings */
        get: operations["findManyHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Headings */
        patch: operations["updateHeadings"];
        trace?: never;
    };
    "/headings/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Headingss matching the given condition */
        patch: operations["updateManyHeadings"];
        trace?: never;
    };
    "/headings/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Headings */
        post: operations["upsertHeadings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Headings */
        delete: operations["deleteHeadings"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Headingss matching the given condition */
        delete: operations["deleteManyHeadings"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Headings */
        get: operations["countHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Headingss */
        get: operations["aggregateHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/headings/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Headingss by fields */
        get: operations["groupByHeadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Stocks */
        post: operations["createStocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Stocks */
        post: operations["createManyStocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Stocks */
        get: operations["findUniqueStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Stocks matching the given condition */
        get: operations["findFirstStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks */
        get: operations["findManyStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Stocks */
        patch: operations["updateStocks"];
        trace?: never;
    };
    "/stocks/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Stockss matching the given condition */
        patch: operations["updateManyStocks"];
        trace?: never;
    };
    "/stocks/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Stocks */
        post: operations["upsertStocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Stocks */
        delete: operations["deleteStocks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Stockss matching the given condition */
        delete: operations["deleteManyStocks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks */
        get: operations["countStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Stockss */
        get: operations["aggregateStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Stockss by fields */
        get: operations["groupByStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Stocks_headings */
        post: operations["createStocks_headings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Stocks_headings */
        post: operations["createManyStocks_headings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Stocks_headings */
        get: operations["findUniqueStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Stocks_headings matching the given condition */
        get: operations["findFirstStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks_headings */
        get: operations["findManyStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Stocks_headings */
        patch: operations["updateStocks_headings"];
        trace?: never;
    };
    "/stocks_headings/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Stocks_headingss matching the given condition */
        patch: operations["updateManyStocks_headings"];
        trace?: never;
    };
    "/stocks_headings/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Stocks_headings */
        post: operations["upsertStocks_headings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Stocks_headings */
        delete: operations["deleteStocks_headings"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Stocks_headingss matching the given condition */
        delete: operations["deleteManyStocks_headings"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks_headings */
        get: operations["countStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Stocks_headingss */
        get: operations["aggregateStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_headings/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Stocks_headingss by fields */
        get: operations["groupByStocks_headings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Stocks_users */
        post: operations["createStocks_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Stocks_users */
        post: operations["createManyStocks_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Stocks_users */
        get: operations["findUniqueStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Stocks_users matching the given condition */
        get: operations["findFirstStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks_users */
        get: operations["findManyStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Stocks_users */
        patch: operations["updateStocks_users"];
        trace?: never;
    };
    "/stocks_users/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Stocks_userss matching the given condition */
        patch: operations["updateManyStocks_users"];
        trace?: never;
    };
    "/stocks_users/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Stocks_users */
        post: operations["upsertStocks_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Stocks_users */
        delete: operations["deleteStocks_users"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Stocks_userss matching the given condition */
        delete: operations["deleteManyStocks_users"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Stocks_users */
        get: operations["countStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Stocks_userss */
        get: operations["aggregateStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocks_users/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Stocks_userss by fields */
        get: operations["groupByStocks_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Timer */
        post: operations["createTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Timer */
        post: operations["createManyTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Timer */
        get: operations["findUniqueTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Timer matching the given condition */
        get: operations["findFirstTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Timer */
        get: operations["findManyTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Timer */
        patch: operations["updateTimer"];
        trace?: never;
    };
    "/timer/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Timers matching the given condition */
        patch: operations["updateManyTimer"];
        trace?: never;
    };
    "/timer/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Timer */
        post: operations["upsertTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Timer */
        delete: operations["deleteTimer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Timers matching the given condition */
        delete: operations["deleteManyTimer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Timer */
        get: operations["countTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Timers */
        get: operations["aggregateTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timer/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Timers by fields */
        get: operations["groupByTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Users */
        post: operations["createUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Users */
        post: operations["createManyUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Users */
        get: operations["findUniqueUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Users matching the given condition */
        get: operations["findFirstUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Users */
        get: operations["findManyUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Users */
        patch: operations["updateUsers"];
        trace?: never;
    };
    "/users/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Userss matching the given condition */
        patch: operations["updateManyUsers"];
        trace?: never;
    };
    "/users/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Users */
        post: operations["upsertUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Users */
        delete: operations["deleteUsers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Userss matching the given condition */
        delete: operations["deleteManyUsers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Users */
        get: operations["countUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Userss */
        get: operations["aggregateUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Userss by fields */
        get: operations["groupByUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Session */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Session */
        post: operations["createManySession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Session */
        get: operations["findUniqueSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Session matching the given condition */
        get: operations["findFirstSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Session */
        get: operations["findManySession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Session */
        patch: operations["updateSession"];
        trace?: never;
    };
    "/session/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Sessions matching the given condition */
        patch: operations["updateManySession"];
        trace?: never;
    };
    "/session/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Session */
        post: operations["upsertSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Session */
        delete: operations["deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Sessions matching the given condition */
        delete: operations["deleteManySession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Session */
        get: operations["countSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Sessions */
        get: operations["aggregateSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Sessions by fields */
        get: operations["groupBySession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        CompetitionScalarFieldEnum: "active" | "created" | "id" | "pause" | "updated" | "ended";
        /** @enum {string} */
        DaysScalarFieldEnum: "created" | "description" | "id" | "name" | "updated" | "active";
        /** @enum {string} */
        HeadingsScalarFieldEnum: "created" | "id" | "name" | "updated" | "day" | "active" | "heading_number";
        /** @enum {string} */
        StocksScalarFieldEnum: "bank_name" | "created" | "id" | "updated";
        /** @enum {string} */
        Stocks_headingsScalarFieldEnum: "created" | "headings" | "id" | "stocks" | "updated" | "previous_price" | "current_price" | "change_in_price" | "percentage_change_in_price";
        /** @enum {string} */
        Stocks_usersScalarFieldEnum: "created" | "id" | "stocks" | "updated" | "users" | "share_count" | "balance_when_shorting" | "short_share_count";
        /** @enum {string} */
        TimerScalarFieldEnum: "active" | "competition_end" | "competition_start" | "created" | "id" | "updated" | "round_time";
        /** @enum {string} */
        UsersScalarFieldEnum: "avatar" | "created" | "email" | "emailVisibility" | "id" | "name" | "password" | "tokenKey" | "updated" | "username" | "verified" | "type" | "wallet";
        /** @enum {string} */
        SessionScalarFieldEnum: "id" | "userId" | "expiresAt";
        /** @enum {string} */
        SortOrder: "asc" | "desc";
        Competition: {
            active: boolean;
            created: string;
            id: string;
            pause: boolean;
            updated: string;
            ended: boolean;
        };
        Days: {
            created: string;
            description: string;
            id: string;
            name: string;
            updated: string;
            active: boolean;
        };
        Headings: {
            created: string;
            id: string;
            name: string;
            updated: string;
            day: string;
            active: boolean;
            heading_number: string | number;
        };
        Stocks: {
            bank_name: string;
            created: string;
            id: string;
            updated: string;
        };
        Stocks_headings: {
            created: string;
            headings: string;
            id: string;
            stocks: string;
            updated: string;
            previous_price: string | number;
            current_price: string | number;
            change_in_price: string | number;
            percentage_change_in_price: string;
        };
        Stocks_users: {
            created: string;
            id: string;
            stocks: string;
            updated: string;
            users: string;
            share_count: string;
            balance_when_shorting: string;
            short_share_count: string;
        };
        Timer: {
            active: boolean;
            competition_end: string;
            competition_start: string;
            created: string;
            id: string;
            updated: string;
            round_time: string | number;
        };
        Users: {
            avatar: string;
            created: string;
            email: string;
            emailVisibility: boolean;
            id: string;
            name: string;
            password: string;
            tokenKey: string;
            updated: string;
            username: string;
            verified: boolean;
            type: string;
            wallet: string;
            session?: components["schemas"]["Session"][];
        };
        Session: {
            id: string;
            userId: string;
            expiresAt: string;
            user: components["schemas"]["Users"];
        };
        CompetitionWhereInput: {
            AND?: components["schemas"]["CompetitionWhereInput"] | components["schemas"]["CompetitionWhereInput"][];
            OR?: components["schemas"]["CompetitionWhereInput"][];
            NOT?: components["schemas"]["CompetitionWhereInput"] | components["schemas"]["CompetitionWhereInput"][];
            active?: components["schemas"]["BoolFilter"] | boolean;
            created?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            pause?: components["schemas"]["BoolFilter"] | boolean;
            updated?: components["schemas"]["StringFilter"] | string;
            ended?: components["schemas"]["BoolFilter"] | boolean;
        };
        CompetitionOrderByWithRelationInput: {
            active?: components["schemas"]["SortOrder"];
            created?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            pause?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            ended?: components["schemas"]["SortOrder"];
        };
        CompetitionWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["CompetitionWhereInput"] | components["schemas"]["CompetitionWhereInput"][];
            OR?: components["schemas"]["CompetitionWhereInput"][];
            NOT?: components["schemas"]["CompetitionWhereInput"] | components["schemas"]["CompetitionWhereInput"][];
            active?: components["schemas"]["BoolFilter"] | boolean;
            created?: components["schemas"]["StringFilter"] | string;
            pause?: components["schemas"]["BoolFilter"] | boolean;
            updated?: components["schemas"]["StringFilter"] | string;
            ended?: components["schemas"]["BoolFilter"] | boolean;
        };
        CompetitionScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["CompetitionScalarWhereWithAggregatesInput"] | components["schemas"]["CompetitionScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["CompetitionScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["CompetitionScalarWhereWithAggregatesInput"] | components["schemas"]["CompetitionScalarWhereWithAggregatesInput"][];
            active?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            pause?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            ended?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
        };
        DaysWhereInput: {
            AND?: components["schemas"]["DaysWhereInput"] | components["schemas"]["DaysWhereInput"][];
            OR?: components["schemas"]["DaysWhereInput"][];
            NOT?: components["schemas"]["DaysWhereInput"] | components["schemas"]["DaysWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            description?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            active?: components["schemas"]["BoolFilter"] | boolean;
        };
        DaysOrderByWithRelationInput: {
            created?: components["schemas"]["SortOrder"];
            description?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            name?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            active?: components["schemas"]["SortOrder"];
        };
        DaysWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["DaysWhereInput"] | components["schemas"]["DaysWhereInput"][];
            OR?: components["schemas"]["DaysWhereInput"][];
            NOT?: components["schemas"]["DaysWhereInput"] | components["schemas"]["DaysWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            description?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            active?: components["schemas"]["BoolFilter"] | boolean;
        };
        DaysScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["DaysScalarWhereWithAggregatesInput"] | components["schemas"]["DaysScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["DaysScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["DaysScalarWhereWithAggregatesInput"] | components["schemas"]["DaysScalarWhereWithAggregatesInput"][];
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            description?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            name?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            active?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
        };
        HeadingsWhereInput: {
            AND?: components["schemas"]["HeadingsWhereInput"] | components["schemas"]["HeadingsWhereInput"][];
            OR?: components["schemas"]["HeadingsWhereInput"][];
            NOT?: components["schemas"]["HeadingsWhereInput"] | components["schemas"]["HeadingsWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            day?: components["schemas"]["StringFilter"] | string;
            active?: components["schemas"]["BoolFilter"] | boolean;
            heading_number?: components["schemas"]["DecimalFilter"] | (string | number);
        };
        HeadingsOrderByWithRelationInput: {
            created?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            name?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            day?: components["schemas"]["SortOrder"];
            active?: components["schemas"]["SortOrder"];
            heading_number?: components["schemas"]["SortOrder"];
        };
        HeadingsWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["HeadingsWhereInput"] | components["schemas"]["HeadingsWhereInput"][];
            OR?: components["schemas"]["HeadingsWhereInput"][];
            NOT?: components["schemas"]["HeadingsWhereInput"] | components["schemas"]["HeadingsWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            day?: components["schemas"]["StringFilter"] | string;
            active?: components["schemas"]["BoolFilter"] | boolean;
            heading_number?: components["schemas"]["DecimalFilter"] | (string | number);
        };
        HeadingsScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["HeadingsScalarWhereWithAggregatesInput"] | components["schemas"]["HeadingsScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["HeadingsScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["HeadingsScalarWhereWithAggregatesInput"] | components["schemas"]["HeadingsScalarWhereWithAggregatesInput"][];
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            name?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            day?: components["schemas"]["StringWithAggregatesFilter"] | string;
            active?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            heading_number?: components["schemas"]["DecimalWithAggregatesFilter"] | (string | number);
        };
        StocksWhereInput: {
            AND?: components["schemas"]["StocksWhereInput"] | components["schemas"]["StocksWhereInput"][];
            OR?: components["schemas"]["StocksWhereInput"][];
            NOT?: components["schemas"]["StocksWhereInput"] | components["schemas"]["StocksWhereInput"][];
            bank_name?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
        };
        StocksOrderByWithRelationInput: {
            bank_name?: components["schemas"]["SortOrder"];
            created?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
        };
        StocksWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["StocksWhereInput"] | components["schemas"]["StocksWhereInput"][];
            OR?: components["schemas"]["StocksWhereInput"][];
            NOT?: components["schemas"]["StocksWhereInput"] | components["schemas"]["StocksWhereInput"][];
            bank_name?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
        };
        StocksScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["StocksScalarWhereWithAggregatesInput"] | components["schemas"]["StocksScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["StocksScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["StocksScalarWhereWithAggregatesInput"] | components["schemas"]["StocksScalarWhereWithAggregatesInput"][];
            bank_name?: components["schemas"]["StringWithAggregatesFilter"] | string;
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        Stocks_headingsWhereInput: {
            AND?: components["schemas"]["Stocks_headingsWhereInput"] | components["schemas"]["Stocks_headingsWhereInput"][];
            OR?: components["schemas"]["Stocks_headingsWhereInput"][];
            NOT?: components["schemas"]["Stocks_headingsWhereInput"] | components["schemas"]["Stocks_headingsWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            headings?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            stocks?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            previous_price?: components["schemas"]["DecimalFilter"] | (string | number);
            current_price?: components["schemas"]["DecimalFilter"] | (string | number);
            change_in_price?: components["schemas"]["DecimalFilter"] | (string | number);
            percentage_change_in_price?: components["schemas"]["StringFilter"] | string;
        };
        Stocks_headingsOrderByWithRelationInput: {
            created?: components["schemas"]["SortOrder"];
            headings?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            stocks?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            previous_price?: components["schemas"]["SortOrder"];
            current_price?: components["schemas"]["SortOrder"];
            change_in_price?: components["schemas"]["SortOrder"];
            percentage_change_in_price?: components["schemas"]["SortOrder"];
        };
        Stocks_headingsWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["Stocks_headingsWhereInput"] | components["schemas"]["Stocks_headingsWhereInput"][];
            OR?: components["schemas"]["Stocks_headingsWhereInput"][];
            NOT?: components["schemas"]["Stocks_headingsWhereInput"] | components["schemas"]["Stocks_headingsWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            headings?: components["schemas"]["StringFilter"] | string;
            stocks?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            previous_price?: components["schemas"]["DecimalFilter"] | (string | number);
            current_price?: components["schemas"]["DecimalFilter"] | (string | number);
            change_in_price?: components["schemas"]["DecimalFilter"] | (string | number);
            percentage_change_in_price?: components["schemas"]["StringFilter"] | string;
        };
        Stocks_headingsScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"] | components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"] | components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"][];
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            headings?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            stocks?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            previous_price?: components["schemas"]["DecimalWithAggregatesFilter"] | (string | number);
            current_price?: components["schemas"]["DecimalWithAggregatesFilter"] | (string | number);
            change_in_price?: components["schemas"]["DecimalWithAggregatesFilter"] | (string | number);
            percentage_change_in_price?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        Stocks_usersWhereInput: {
            AND?: components["schemas"]["Stocks_usersWhereInput"] | components["schemas"]["Stocks_usersWhereInput"][];
            OR?: components["schemas"]["Stocks_usersWhereInput"][];
            NOT?: components["schemas"]["Stocks_usersWhereInput"] | components["schemas"]["Stocks_usersWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            stocks?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            users?: components["schemas"]["StringFilter"] | string;
            share_count?: components["schemas"]["StringFilter"] | string;
            balance_when_shorting?: components["schemas"]["StringFilter"] | string;
            short_share_count?: components["schemas"]["StringFilter"] | string;
        };
        Stocks_usersOrderByWithRelationInput: {
            created?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            stocks?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            users?: components["schemas"]["SortOrder"];
            share_count?: components["schemas"]["SortOrder"];
            balance_when_shorting?: components["schemas"]["SortOrder"];
            short_share_count?: components["schemas"]["SortOrder"];
        };
        Stocks_usersWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["Stocks_usersWhereInput"] | components["schemas"]["Stocks_usersWhereInput"][];
            OR?: components["schemas"]["Stocks_usersWhereInput"][];
            NOT?: components["schemas"]["Stocks_usersWhereInput"] | components["schemas"]["Stocks_usersWhereInput"][];
            created?: components["schemas"]["StringFilter"] | string;
            stocks?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            users?: components["schemas"]["StringFilter"] | string;
            share_count?: components["schemas"]["StringFilter"] | string;
            balance_when_shorting?: components["schemas"]["StringFilter"] | string;
            short_share_count?: components["schemas"]["StringFilter"] | string;
        };
        Stocks_usersScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"] | components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"] | components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"][];
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            stocks?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            users?: components["schemas"]["StringWithAggregatesFilter"] | string;
            share_count?: components["schemas"]["StringWithAggregatesFilter"] | string;
            balance_when_shorting?: components["schemas"]["StringWithAggregatesFilter"] | string;
            short_share_count?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        TimerWhereInput: {
            AND?: components["schemas"]["TimerWhereInput"] | components["schemas"]["TimerWhereInput"][];
            OR?: components["schemas"]["TimerWhereInput"][];
            NOT?: components["schemas"]["TimerWhereInput"] | components["schemas"]["TimerWhereInput"][];
            active?: components["schemas"]["BoolFilter"] | boolean;
            competition_end?: components["schemas"]["StringFilter"] | string;
            competition_start?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            id?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            round_time?: components["schemas"]["DecimalFilter"] | (string | number);
        };
        TimerOrderByWithRelationInput: {
            active?: components["schemas"]["SortOrder"];
            competition_end?: components["schemas"]["SortOrder"];
            competition_start?: components["schemas"]["SortOrder"];
            created?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            round_time?: components["schemas"]["SortOrder"];
        };
        TimerWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["TimerWhereInput"] | components["schemas"]["TimerWhereInput"][];
            OR?: components["schemas"]["TimerWhereInput"][];
            NOT?: components["schemas"]["TimerWhereInput"] | components["schemas"]["TimerWhereInput"][];
            active?: components["schemas"]["BoolFilter"] | boolean;
            competition_end?: components["schemas"]["StringFilter"] | string;
            competition_start?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            round_time?: components["schemas"]["DecimalFilter"] | (string | number);
        };
        TimerScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["TimerScalarWhereWithAggregatesInput"] | components["schemas"]["TimerScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["TimerScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["TimerScalarWhereWithAggregatesInput"] | components["schemas"]["TimerScalarWhereWithAggregatesInput"][];
            active?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            competition_end?: components["schemas"]["StringWithAggregatesFilter"] | string;
            competition_start?: components["schemas"]["StringWithAggregatesFilter"] | string;
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            round_time?: components["schemas"]["DecimalWithAggregatesFilter"] | (string | number);
        };
        UsersWhereInput: {
            AND?: components["schemas"]["UsersWhereInput"] | components["schemas"]["UsersWhereInput"][];
            OR?: components["schemas"]["UsersWhereInput"][];
            NOT?: components["schemas"]["UsersWhereInput"] | components["schemas"]["UsersWhereInput"][];
            avatar?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            email?: components["schemas"]["StringFilter"] | string;
            emailVisibility?: components["schemas"]["BoolFilter"] | boolean;
            id?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            password?: components["schemas"]["StringFilter"] | string;
            tokenKey?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            username?: components["schemas"]["StringFilter"] | string;
            verified?: components["schemas"]["BoolFilter"] | boolean;
            type?: components["schemas"]["StringFilter"] | string;
            wallet?: components["schemas"]["StringFilter"] | string;
            session?: components["schemas"]["SessionListRelationFilter"];
        };
        UsersOrderByWithRelationInput: {
            avatar?: components["schemas"]["SortOrder"];
            created?: components["schemas"]["SortOrder"];
            email?: components["schemas"]["SortOrder"];
            emailVisibility?: components["schemas"]["SortOrder"];
            id?: components["schemas"]["SortOrder"];
            name?: components["schemas"]["SortOrder"];
            password?: components["schemas"]["SortOrder"];
            tokenKey?: components["schemas"]["SortOrder"];
            updated?: components["schemas"]["SortOrder"];
            username?: components["schemas"]["SortOrder"];
            verified?: components["schemas"]["SortOrder"];
            type?: components["schemas"]["SortOrder"];
            wallet?: components["schemas"]["SortOrder"];
            session?: components["schemas"]["SessionOrderByRelationAggregateInput"];
        };
        UsersWhereUniqueInput: {
            id?: string;
            tokenKey?: string;
            username?: string;
            AND?: components["schemas"]["UsersWhereInput"] | components["schemas"]["UsersWhereInput"][];
            OR?: components["schemas"]["UsersWhereInput"][];
            NOT?: components["schemas"]["UsersWhereInput"] | components["schemas"]["UsersWhereInput"][];
            avatar?: components["schemas"]["StringFilter"] | string;
            created?: components["schemas"]["StringFilter"] | string;
            email?: components["schemas"]["StringFilter"] | string;
            emailVisibility?: components["schemas"]["BoolFilter"] | boolean;
            name?: components["schemas"]["StringFilter"] | string;
            password?: components["schemas"]["StringFilter"] | string;
            updated?: components["schemas"]["StringFilter"] | string;
            verified?: components["schemas"]["BoolFilter"] | boolean;
            type?: components["schemas"]["StringFilter"] | string;
            wallet?: components["schemas"]["StringFilter"] | string;
            session?: components["schemas"]["SessionListRelationFilter"];
        };
        UsersScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["UsersScalarWhereWithAggregatesInput"] | components["schemas"]["UsersScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["UsersScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["UsersScalarWhereWithAggregatesInput"] | components["schemas"]["UsersScalarWhereWithAggregatesInput"][];
            avatar?: components["schemas"]["StringWithAggregatesFilter"] | string;
            created?: components["schemas"]["StringWithAggregatesFilter"] | string;
            email?: components["schemas"]["StringWithAggregatesFilter"] | string;
            emailVisibility?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            name?: components["schemas"]["StringWithAggregatesFilter"] | string;
            password?: components["schemas"]["StringWithAggregatesFilter"] | string;
            tokenKey?: components["schemas"]["StringWithAggregatesFilter"] | string;
            updated?: components["schemas"]["StringWithAggregatesFilter"] | string;
            username?: components["schemas"]["StringWithAggregatesFilter"] | string;
            verified?: components["schemas"]["BoolWithAggregatesFilter"] | boolean;
            type?: components["schemas"]["StringWithAggregatesFilter"] | string;
            wallet?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        SessionWhereInput: {
            AND?: components["schemas"]["SessionWhereInput"] | components["schemas"]["SessionWhereInput"][];
            OR?: components["schemas"]["SessionWhereInput"][];
            NOT?: components["schemas"]["SessionWhereInput"] | components["schemas"]["SessionWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            userId?: components["schemas"]["StringFilter"] | string;
            expiresAt?: components["schemas"]["StringFilter"] | string;
            user?: components["schemas"]["UsersScalarRelationFilter"] | components["schemas"]["UsersWhereInput"];
        };
        SessionOrderByWithRelationInput: {
            id?: components["schemas"]["SortOrder"];
            userId?: components["schemas"]["SortOrder"];
            expiresAt?: components["schemas"]["SortOrder"];
            user?: components["schemas"]["UsersOrderByWithRelationInput"];
        };
        SessionWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["SessionWhereInput"] | components["schemas"]["SessionWhereInput"][];
            OR?: components["schemas"]["SessionWhereInput"][];
            NOT?: components["schemas"]["SessionWhereInput"] | components["schemas"]["SessionWhereInput"][];
            userId?: components["schemas"]["StringFilter"] | string;
            expiresAt?: components["schemas"]["StringFilter"] | string;
            user?: components["schemas"]["UsersScalarRelationFilter"] | components["schemas"]["UsersWhereInput"];
        };
        SessionScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["SessionScalarWhereWithAggregatesInput"] | components["schemas"]["SessionScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["SessionScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["SessionScalarWhereWithAggregatesInput"] | components["schemas"]["SessionScalarWhereWithAggregatesInput"][];
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            userId?: components["schemas"]["StringWithAggregatesFilter"] | string;
            expiresAt?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        CompetitionCreateInput: {
            active?: boolean;
            created?: string;
            id?: string;
            pause?: boolean;
            updated?: string;
            ended?: boolean;
        };
        CompetitionUpdateInput: {
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            pause?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            ended?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
        };
        CompetitionCreateManyInput: {
            active?: boolean;
            created?: string;
            id?: string;
            pause?: boolean;
            updated?: string;
            ended?: boolean;
        };
        CompetitionUpdateManyMutationInput: {
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            pause?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            ended?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
        };
        DaysCreateInput: {
            created?: string;
            description?: string;
            id?: string;
            name?: string;
            updated?: string;
            active?: boolean;
        };
        DaysUpdateInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            description?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
        };
        DaysCreateManyInput: {
            created?: string;
            description?: string;
            id?: string;
            name?: string;
            updated?: string;
            active?: boolean;
        };
        DaysUpdateManyMutationInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            description?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
        };
        HeadingsCreateInput: {
            created?: string;
            id?: string;
            name?: string;
            updated?: string;
            day?: string;
            active?: boolean;
            heading_number?: string | number;
        };
        HeadingsUpdateInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            day?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            heading_number?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
        };
        HeadingsCreateManyInput: {
            created?: string;
            id?: string;
            name?: string;
            updated?: string;
            day?: string;
            active?: boolean;
            heading_number?: string | number;
        };
        HeadingsUpdateManyMutationInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            day?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            heading_number?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
        };
        StocksCreateInput: {
            bank_name?: string;
            created?: string;
            id?: string;
            updated?: string;
        };
        StocksUpdateInput: {
            bank_name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        StocksCreateManyInput: {
            bank_name?: string;
            created?: string;
            id?: string;
            updated?: string;
        };
        StocksUpdateManyMutationInput: {
            bank_name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        Stocks_headingsCreateInput: {
            created?: string;
            headings?: string;
            id?: string;
            stocks?: string;
            updated?: string;
            previous_price?: string | number;
            current_price?: string | number;
            change_in_price?: string | number;
            percentage_change_in_price?: string;
        };
        Stocks_headingsUpdateInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            headings?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            stocks?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            previous_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            current_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            change_in_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            percentage_change_in_price?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        Stocks_headingsCreateManyInput: {
            created?: string;
            headings?: string;
            id?: string;
            stocks?: string;
            updated?: string;
            previous_price?: string | number;
            current_price?: string | number;
            change_in_price?: string | number;
            percentage_change_in_price?: string;
        };
        Stocks_headingsUpdateManyMutationInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            headings?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            stocks?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            previous_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            current_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            change_in_price?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
            percentage_change_in_price?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        Stocks_usersCreateInput: {
            created?: string;
            id?: string;
            stocks?: string;
            updated?: string;
            users?: string;
            share_count?: string;
            balance_when_shorting?: string;
            short_share_count?: string;
        };
        Stocks_usersUpdateInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            stocks?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            users?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            share_count?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            balance_when_shorting?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            short_share_count?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        Stocks_usersCreateManyInput: {
            created?: string;
            id?: string;
            stocks?: string;
            updated?: string;
            users?: string;
            share_count?: string;
            balance_when_shorting?: string;
            short_share_count?: string;
        };
        Stocks_usersUpdateManyMutationInput: {
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            stocks?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            users?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            share_count?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            balance_when_shorting?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            short_share_count?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        TimerCreateInput: {
            active?: boolean;
            competition_end?: string;
            competition_start?: string;
            created?: string;
            id?: string;
            updated?: string;
            round_time?: string | number;
        };
        TimerUpdateInput: {
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            competition_end?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            competition_start?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            round_time?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
        };
        TimerCreateManyInput: {
            active?: boolean;
            competition_end?: string;
            competition_start?: string;
            created?: string;
            id?: string;
            updated?: string;
            round_time?: string | number;
        };
        TimerUpdateManyMutationInput: {
            active?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            competition_end?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            competition_start?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            round_time?: (string | number) | components["schemas"]["DecimalFieldUpdateOperationsInput"];
        };
        UsersCreateInput: {
            avatar?: string;
            created?: string;
            email?: string;
            emailVisibility?: boolean;
            id?: string;
            name?: string;
            password: string;
            tokenKey: string;
            updated?: string;
            username: string;
            verified?: boolean;
            type?: string;
            wallet?: string;
            session?: components["schemas"]["SessionCreateNestedManyWithoutUserInput"];
        };
        UsersUpdateInput: {
            avatar?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            emailVisibility?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            tokenKey?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            username?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            verified?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            type?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            wallet?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            session?: components["schemas"]["SessionUpdateManyWithoutUserNestedInput"];
        };
        UsersCreateManyInput: {
            avatar?: string;
            created?: string;
            email?: string;
            emailVisibility?: boolean;
            id?: string;
            name?: string;
            password: string;
            tokenKey: string;
            updated?: string;
            username: string;
            verified?: boolean;
            type?: string;
            wallet?: string;
        };
        UsersUpdateManyMutationInput: {
            avatar?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            emailVisibility?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            tokenKey?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            username?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            verified?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            type?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            wallet?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        SessionCreateInput: {
            id?: string;
            expiresAt: string;
            user: components["schemas"]["UsersCreateNestedOneWithoutSessionInput"];
        };
        SessionUpdateInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            expiresAt?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            user?: components["schemas"]["UsersUpdateOneRequiredWithoutSessionNestedInput"];
        };
        SessionCreateManyInput: {
            id?: string;
            userId: string;
            expiresAt: string;
        };
        SessionUpdateManyMutationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            expiresAt?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        BoolFilter: {
            equals?: boolean;
            not?: boolean | components["schemas"]["NestedBoolFilter"];
        };
        StringFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringFilter"];
        };
        BoolWithAggregatesFilter: {
            equals?: boolean;
            not?: boolean | components["schemas"]["NestedBoolWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedBoolFilter"];
            _max?: components["schemas"]["NestedBoolFilter"];
        };
        StringWithAggregatesFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedStringFilter"];
            _max?: components["schemas"]["NestedStringFilter"];
        };
        DecimalFilter: {
            equals?: string | number;
            in?: (string | number)[];
            notIn?: (string | number)[];
            lt?: string | number;
            lte?: string | number;
            gt?: string | number;
            gte?: string | number;
            not?: (string | number) | components["schemas"]["NestedDecimalFilter"];
        };
        DecimalWithAggregatesFilter: {
            equals?: string | number;
            in?: (string | number)[];
            notIn?: (string | number)[];
            lt?: string | number;
            lte?: string | number;
            gt?: string | number;
            gte?: string | number;
            not?: (string | number) | components["schemas"]["NestedDecimalWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _avg?: components["schemas"]["NestedDecimalFilter"];
            _sum?: components["schemas"]["NestedDecimalFilter"];
            _min?: components["schemas"]["NestedDecimalFilter"];
            _max?: components["schemas"]["NestedDecimalFilter"];
        };
        SessionListRelationFilter: {
            every?: components["schemas"]["SessionWhereInput"];
            some?: components["schemas"]["SessionWhereInput"];
            none?: components["schemas"]["SessionWhereInput"];
        };
        SessionOrderByRelationAggregateInput: {
            _count?: components["schemas"]["SortOrder"];
        };
        UsersScalarRelationFilter: {
            is?: components["schemas"]["UsersWhereInput"];
            isNot?: components["schemas"]["UsersWhereInput"];
        };
        BoolFieldUpdateOperationsInput: {
            set?: boolean;
        };
        StringFieldUpdateOperationsInput: {
            set?: string;
        };
        DecimalFieldUpdateOperationsInput: {
            set?: string | number;
            increment?: string | number;
            decrement?: string | number;
            multiply?: string | number;
            divide?: string | number;
        };
        SessionCreateNestedManyWithoutUserInput: {
            create?: components["schemas"]["SessionCreateWithoutUserInput"] | components["schemas"]["SessionCreateWithoutUserInput"][] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"][];
            connectOrCreate?: components["schemas"]["SessionCreateOrConnectWithoutUserInput"] | components["schemas"]["SessionCreateOrConnectWithoutUserInput"][];
            createMany?: components["schemas"]["SessionCreateManyUserInputEnvelope"];
            connect?: components["schemas"]["SessionWhereUniqueInput"] | components["schemas"]["SessionWhereUniqueInput"][];
        };
        SessionUpdateManyWithoutUserNestedInput: {
            create?: components["schemas"]["SessionCreateWithoutUserInput"] | components["schemas"]["SessionCreateWithoutUserInput"][] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"][];
            connectOrCreate?: components["schemas"]["SessionCreateOrConnectWithoutUserInput"] | components["schemas"]["SessionCreateOrConnectWithoutUserInput"][];
            upsert?: components["schemas"]["SessionUpsertWithWhereUniqueWithoutUserInput"] | components["schemas"]["SessionUpsertWithWhereUniqueWithoutUserInput"][];
            createMany?: components["schemas"]["SessionCreateManyUserInputEnvelope"];
            set?: components["schemas"]["SessionWhereUniqueInput"] | components["schemas"]["SessionWhereUniqueInput"][];
            disconnect?: components["schemas"]["SessionWhereUniqueInput"] | components["schemas"]["SessionWhereUniqueInput"][];
            delete?: components["schemas"]["SessionWhereUniqueInput"] | components["schemas"]["SessionWhereUniqueInput"][];
            connect?: components["schemas"]["SessionWhereUniqueInput"] | components["schemas"]["SessionWhereUniqueInput"][];
            update?: components["schemas"]["SessionUpdateWithWhereUniqueWithoutUserInput"] | components["schemas"]["SessionUpdateWithWhereUniqueWithoutUserInput"][];
            updateMany?: components["schemas"]["SessionUpdateManyWithWhereWithoutUserInput"] | components["schemas"]["SessionUpdateManyWithWhereWithoutUserInput"][];
            deleteMany?: components["schemas"]["SessionScalarWhereInput"] | components["schemas"]["SessionScalarWhereInput"][];
        };
        UsersCreateNestedOneWithoutSessionInput: {
            create?: components["schemas"]["UsersCreateWithoutSessionInput"] | components["schemas"]["UsersUncheckedCreateWithoutSessionInput"];
            connectOrCreate?: components["schemas"]["UsersCreateOrConnectWithoutSessionInput"];
            connect?: components["schemas"]["UsersWhereUniqueInput"];
        };
        UsersUpdateOneRequiredWithoutSessionNestedInput: {
            create?: components["schemas"]["UsersCreateWithoutSessionInput"] | components["schemas"]["UsersUncheckedCreateWithoutSessionInput"];
            connectOrCreate?: components["schemas"]["UsersCreateOrConnectWithoutSessionInput"];
            upsert?: components["schemas"]["UsersUpsertWithoutSessionInput"];
            connect?: components["schemas"]["UsersWhereUniqueInput"];
            update?: components["schemas"]["UsersUpdateToOneWithWhereWithoutSessionInput"] | components["schemas"]["UsersUpdateWithoutSessionInput"] | components["schemas"]["UsersUncheckedUpdateWithoutSessionInput"];
        };
        NestedBoolFilter: {
            equals?: boolean;
            not?: boolean | components["schemas"]["NestedBoolFilter"];
        };
        NestedStringFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringFilter"];
        };
        NestedBoolWithAggregatesFilter: {
            equals?: boolean;
            not?: boolean | components["schemas"]["NestedBoolWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedBoolFilter"];
            _max?: components["schemas"]["NestedBoolFilter"];
        };
        NestedIntFilter: {
            equals?: number;
            in?: number[];
            notIn?: number[];
            lt?: number;
            lte?: number;
            gt?: number;
            gte?: number;
            not?: number | components["schemas"]["NestedIntFilter"];
        };
        NestedStringWithAggregatesFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedStringFilter"];
            _max?: components["schemas"]["NestedStringFilter"];
        };
        NestedDecimalFilter: {
            equals?: string | number;
            in?: (string | number)[];
            notIn?: (string | number)[];
            lt?: string | number;
            lte?: string | number;
            gt?: string | number;
            gte?: string | number;
            not?: (string | number) | components["schemas"]["NestedDecimalFilter"];
        };
        NestedDecimalWithAggregatesFilter: {
            equals?: string | number;
            in?: (string | number)[];
            notIn?: (string | number)[];
            lt?: string | number;
            lte?: string | number;
            gt?: string | number;
            gte?: string | number;
            not?: (string | number) | components["schemas"]["NestedDecimalWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _avg?: components["schemas"]["NestedDecimalFilter"];
            _sum?: components["schemas"]["NestedDecimalFilter"];
            _min?: components["schemas"]["NestedDecimalFilter"];
            _max?: components["schemas"]["NestedDecimalFilter"];
        };
        SessionCreateWithoutUserInput: {
            id?: string;
            expiresAt: string;
        };
        SessionUncheckedCreateWithoutUserInput: {
            id?: string;
            expiresAt: string;
        };
        SessionCreateOrConnectWithoutUserInput: {
            where: components["schemas"]["SessionWhereUniqueInput"];
            create: components["schemas"]["SessionCreateWithoutUserInput"] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"];
        };
        SessionCreateManyUserInputEnvelope: {
            data: components["schemas"]["SessionCreateManyUserInput"] | components["schemas"]["SessionCreateManyUserInput"][];
        };
        SessionUpsertWithWhereUniqueWithoutUserInput: {
            where: components["schemas"]["SessionWhereUniqueInput"];
            update: components["schemas"]["SessionUpdateWithoutUserInput"] | components["schemas"]["SessionUncheckedUpdateWithoutUserInput"];
            create: components["schemas"]["SessionCreateWithoutUserInput"] | components["schemas"]["SessionUncheckedCreateWithoutUserInput"];
        };
        SessionUpdateWithWhereUniqueWithoutUserInput: {
            where: components["schemas"]["SessionWhereUniqueInput"];
            data: components["schemas"]["SessionUpdateWithoutUserInput"] | components["schemas"]["SessionUncheckedUpdateWithoutUserInput"];
        };
        SessionUpdateManyWithWhereWithoutUserInput: {
            where: components["schemas"]["SessionScalarWhereInput"];
            data: components["schemas"]["SessionUpdateManyMutationInput"] | components["schemas"]["SessionUncheckedUpdateManyWithoutUserInput"];
        };
        SessionScalarWhereInput: {
            AND?: components["schemas"]["SessionScalarWhereInput"] | components["schemas"]["SessionScalarWhereInput"][];
            OR?: components["schemas"]["SessionScalarWhereInput"][];
            NOT?: components["schemas"]["SessionScalarWhereInput"] | components["schemas"]["SessionScalarWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            userId?: components["schemas"]["StringFilter"] | string;
            expiresAt?: components["schemas"]["StringFilter"] | string;
        };
        UsersCreateWithoutSessionInput: {
            avatar?: string;
            created?: string;
            email?: string;
            emailVisibility?: boolean;
            id?: string;
            name?: string;
            password: string;
            tokenKey: string;
            updated?: string;
            username: string;
            verified?: boolean;
            type?: string;
            wallet?: string;
        };
        UsersUncheckedCreateWithoutSessionInput: {
            avatar?: string;
            created?: string;
            email?: string;
            emailVisibility?: boolean;
            id?: string;
            name?: string;
            password: string;
            tokenKey: string;
            updated?: string;
            username: string;
            verified?: boolean;
            type?: string;
            wallet?: string;
        };
        UsersCreateOrConnectWithoutSessionInput: {
            where: components["schemas"]["UsersWhereUniqueInput"];
            create: components["schemas"]["UsersCreateWithoutSessionInput"] | components["schemas"]["UsersUncheckedCreateWithoutSessionInput"];
        };
        UsersUpsertWithoutSessionInput: {
            update: components["schemas"]["UsersUpdateWithoutSessionInput"] | components["schemas"]["UsersUncheckedUpdateWithoutSessionInput"];
            create: components["schemas"]["UsersCreateWithoutSessionInput"] | components["schemas"]["UsersUncheckedCreateWithoutSessionInput"];
            where?: components["schemas"]["UsersWhereInput"];
        };
        UsersUpdateToOneWithWhereWithoutSessionInput: {
            where?: components["schemas"]["UsersWhereInput"];
            data: components["schemas"]["UsersUpdateWithoutSessionInput"] | components["schemas"]["UsersUncheckedUpdateWithoutSessionInput"];
        };
        UsersUpdateWithoutSessionInput: {
            avatar?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            emailVisibility?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            tokenKey?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            username?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            verified?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            type?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            wallet?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        UsersUncheckedUpdateWithoutSessionInput: {
            avatar?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            created?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            emailVisibility?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            tokenKey?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            updated?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            username?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            verified?: boolean | components["schemas"]["BoolFieldUpdateOperationsInput"];
            type?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            wallet?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        SessionCreateManyUserInput: {
            id?: string;
            expiresAt: string;
        };
        SessionUpdateWithoutUserInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            expiresAt?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        SessionUncheckedUpdateWithoutUserInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            expiresAt?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        SessionUncheckedUpdateManyWithoutUserInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            expiresAt?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        UsersDefaultArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
        };
        UsersInclude: {
            session?: boolean | components["schemas"]["SessionFindManyArgs"];
            _count?: boolean | components["schemas"]["UsersCountOutputTypeDefaultArgs"];
        };
        SessionInclude: {
            user?: boolean | components["schemas"]["UsersDefaultArgs"];
        };
        UsersCountOutputTypeSelect: {
            session?: boolean;
        };
        UsersCountOutputTypeDefaultArgs: {
            select?: components["schemas"]["UsersCountOutputTypeSelect"];
        };
        CompetitionSelect: {
            active?: boolean;
            created?: boolean;
            id?: boolean;
            pause?: boolean;
            updated?: boolean;
            ended?: boolean;
        };
        DaysSelect: {
            created?: boolean;
            description?: boolean;
            id?: boolean;
            name?: boolean;
            updated?: boolean;
            active?: boolean;
        };
        HeadingsSelect: {
            created?: boolean;
            id?: boolean;
            name?: boolean;
            updated?: boolean;
            day?: boolean;
            active?: boolean;
            heading_number?: boolean;
        };
        StocksSelect: {
            bank_name?: boolean;
            created?: boolean;
            id?: boolean;
            updated?: boolean;
        };
        Stocks_headingsSelect: {
            created?: boolean;
            headings?: boolean;
            id?: boolean;
            stocks?: boolean;
            updated?: boolean;
            previous_price?: boolean;
            current_price?: boolean;
            change_in_price?: boolean;
            percentage_change_in_price?: boolean;
        };
        Stocks_usersSelect: {
            created?: boolean;
            id?: boolean;
            stocks?: boolean;
            updated?: boolean;
            users?: boolean;
            share_count?: boolean;
            balance_when_shorting?: boolean;
            short_share_count?: boolean;
        };
        TimerSelect: {
            active?: boolean;
            competition_end?: boolean;
            competition_start?: boolean;
            created?: boolean;
            id?: boolean;
            updated?: boolean;
            round_time?: boolean;
        };
        UsersSelect: {
            avatar?: boolean;
            created?: boolean;
            email?: boolean;
            emailVisibility?: boolean;
            id?: boolean;
            name?: boolean;
            password?: boolean;
            tokenKey?: boolean;
            updated?: boolean;
            username?: boolean;
            verified?: boolean;
            type?: boolean;
            wallet?: boolean;
            session?: boolean | components["schemas"]["SessionFindManyArgs"];
            _count?: boolean | components["schemas"]["UsersCountOutputTypeDefaultArgs"];
        };
        SessionSelect: {
            id?: boolean;
            userId?: boolean;
            expiresAt?: boolean;
            user?: boolean | components["schemas"]["UsersDefaultArgs"];
        };
        AggregateCompetition: {
            _count?: null | components["schemas"]["CompetitionCountAggregateOutputType"];
            _min?: null | components["schemas"]["CompetitionMinAggregateOutputType"];
            _max?: null | components["schemas"]["CompetitionMaxAggregateOutputType"];
        };
        CompetitionGroupByOutputType: {
            active: boolean;
            created: string;
            id: string;
            pause: boolean;
            updated: string;
            ended: boolean;
            _count?: null | components["schemas"]["CompetitionCountAggregateOutputType"];
            _min?: null | components["schemas"]["CompetitionMinAggregateOutputType"];
            _max?: null | components["schemas"]["CompetitionMaxAggregateOutputType"];
        };
        AggregateDays: {
            _count?: null | components["schemas"]["DaysCountAggregateOutputType"];
            _min?: null | components["schemas"]["DaysMinAggregateOutputType"];
            _max?: null | components["schemas"]["DaysMaxAggregateOutputType"];
        };
        DaysGroupByOutputType: {
            created: string;
            description: string;
            id: string;
            name: string;
            updated: string;
            active: boolean;
            _count?: null | components["schemas"]["DaysCountAggregateOutputType"];
            _min?: null | components["schemas"]["DaysMinAggregateOutputType"];
            _max?: null | components["schemas"]["DaysMaxAggregateOutputType"];
        };
        AggregateHeadings: {
            _count?: null | components["schemas"]["HeadingsCountAggregateOutputType"];
            _avg?: null | components["schemas"]["HeadingsAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["HeadingsSumAggregateOutputType"];
            _min?: null | components["schemas"]["HeadingsMinAggregateOutputType"];
            _max?: null | components["schemas"]["HeadingsMaxAggregateOutputType"];
        };
        HeadingsGroupByOutputType: {
            created: string;
            id: string;
            name: string;
            updated: string;
            day: string;
            active: boolean;
            heading_number: string | number;
            _count?: null | components["schemas"]["HeadingsCountAggregateOutputType"];
            _avg?: null | components["schemas"]["HeadingsAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["HeadingsSumAggregateOutputType"];
            _min?: null | components["schemas"]["HeadingsMinAggregateOutputType"];
            _max?: null | components["schemas"]["HeadingsMaxAggregateOutputType"];
        };
        AggregateStocks: {
            _count?: null | components["schemas"]["StocksCountAggregateOutputType"];
            _min?: null | components["schemas"]["StocksMinAggregateOutputType"];
            _max?: null | components["schemas"]["StocksMaxAggregateOutputType"];
        };
        StocksGroupByOutputType: {
            bank_name: string;
            created: string;
            id: string;
            updated: string;
            _count?: null | components["schemas"]["StocksCountAggregateOutputType"];
            _min?: null | components["schemas"]["StocksMinAggregateOutputType"];
            _max?: null | components["schemas"]["StocksMaxAggregateOutputType"];
        };
        AggregateStocks_headings: {
            _count?: null | components["schemas"]["Stocks_headingsCountAggregateOutputType"];
            _avg?: null | components["schemas"]["Stocks_headingsAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["Stocks_headingsSumAggregateOutputType"];
            _min?: null | components["schemas"]["Stocks_headingsMinAggregateOutputType"];
            _max?: null | components["schemas"]["Stocks_headingsMaxAggregateOutputType"];
        };
        Stocks_headingsGroupByOutputType: {
            created: string;
            headings: string;
            id: string;
            stocks: string;
            updated: string;
            previous_price: string | number;
            current_price: string | number;
            change_in_price: string | number;
            percentage_change_in_price: string;
            _count?: null | components["schemas"]["Stocks_headingsCountAggregateOutputType"];
            _avg?: null | components["schemas"]["Stocks_headingsAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["Stocks_headingsSumAggregateOutputType"];
            _min?: null | components["schemas"]["Stocks_headingsMinAggregateOutputType"];
            _max?: null | components["schemas"]["Stocks_headingsMaxAggregateOutputType"];
        };
        AggregateStocks_users: {
            _count?: null | components["schemas"]["Stocks_usersCountAggregateOutputType"];
            _min?: null | components["schemas"]["Stocks_usersMinAggregateOutputType"];
            _max?: null | components["schemas"]["Stocks_usersMaxAggregateOutputType"];
        };
        Stocks_usersGroupByOutputType: {
            created: string;
            id: string;
            stocks: string;
            updated: string;
            users: string;
            share_count: string;
            balance_when_shorting: string;
            short_share_count: string;
            _count?: null | components["schemas"]["Stocks_usersCountAggregateOutputType"];
            _min?: null | components["schemas"]["Stocks_usersMinAggregateOutputType"];
            _max?: null | components["schemas"]["Stocks_usersMaxAggregateOutputType"];
        };
        AggregateTimer: {
            _count?: null | components["schemas"]["TimerCountAggregateOutputType"];
            _avg?: null | components["schemas"]["TimerAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["TimerSumAggregateOutputType"];
            _min?: null | components["schemas"]["TimerMinAggregateOutputType"];
            _max?: null | components["schemas"]["TimerMaxAggregateOutputType"];
        };
        TimerGroupByOutputType: {
            active: boolean;
            competition_end: string;
            competition_start: string;
            created: string;
            id: string;
            updated: string;
            round_time: string | number;
            _count?: null | components["schemas"]["TimerCountAggregateOutputType"];
            _avg?: null | components["schemas"]["TimerAvgAggregateOutputType"];
            _sum?: null | components["schemas"]["TimerSumAggregateOutputType"];
            _min?: null | components["schemas"]["TimerMinAggregateOutputType"];
            _max?: null | components["schemas"]["TimerMaxAggregateOutputType"];
        };
        AggregateUsers: {
            _count?: null | components["schemas"]["UsersCountAggregateOutputType"];
            _min?: null | components["schemas"]["UsersMinAggregateOutputType"];
            _max?: null | components["schemas"]["UsersMaxAggregateOutputType"];
        };
        UsersGroupByOutputType: {
            avatar: string;
            created: string;
            email: string;
            emailVisibility: boolean;
            id: string;
            name: string;
            password: string;
            tokenKey: string;
            updated: string;
            username: string;
            verified: boolean;
            type: string;
            wallet: string;
            _count?: null | components["schemas"]["UsersCountAggregateOutputType"];
            _min?: null | components["schemas"]["UsersMinAggregateOutputType"];
            _max?: null | components["schemas"]["UsersMaxAggregateOutputType"];
        };
        AggregateSession: {
            _count?: null | components["schemas"]["SessionCountAggregateOutputType"];
            _min?: null | components["schemas"]["SessionMinAggregateOutputType"];
            _max?: null | components["schemas"]["SessionMaxAggregateOutputType"];
        };
        SessionGroupByOutputType: {
            id: string;
            userId: string;
            expiresAt: string;
            _count?: null | components["schemas"]["SessionCountAggregateOutputType"];
            _min?: null | components["schemas"]["SessionMinAggregateOutputType"];
            _max?: null | components["schemas"]["SessionMaxAggregateOutputType"];
        };
        CompetitionCountAggregateOutputType: {
            active: number;
            created: number;
            id: number;
            pause: number;
            updated: number;
            ended: number;
            _all: number;
        };
        CompetitionMinAggregateOutputType: {
            active?: null | boolean;
            created?: null | string;
            id?: null | string;
            pause?: null | boolean;
            updated?: null | string;
            ended?: null | boolean;
        };
        CompetitionMaxAggregateOutputType: {
            active?: null | boolean;
            created?: null | string;
            id?: null | string;
            pause?: null | boolean;
            updated?: null | string;
            ended?: null | boolean;
        };
        DaysCountAggregateOutputType: {
            created: number;
            description: number;
            id: number;
            name: number;
            updated: number;
            active: number;
            _all: number;
        };
        DaysMinAggregateOutputType: {
            created?: null | string;
            description?: null | string;
            id?: null | string;
            name?: null | string;
            updated?: null | string;
            active?: null | boolean;
        };
        DaysMaxAggregateOutputType: {
            created?: null | string;
            description?: null | string;
            id?: null | string;
            name?: null | string;
            updated?: null | string;
            active?: null | boolean;
        };
        HeadingsCountAggregateOutputType: {
            created: number;
            id: number;
            name: number;
            updated: number;
            day: number;
            active: number;
            heading_number: number;
            _all: number;
        };
        HeadingsAvgAggregateOutputType: {
            heading_number?: string | number | null;
        };
        HeadingsSumAggregateOutputType: {
            heading_number?: string | number | null;
        };
        HeadingsMinAggregateOutputType: {
            created?: null | string;
            id?: null | string;
            name?: null | string;
            updated?: null | string;
            day?: null | string;
            active?: null | boolean;
            heading_number?: string | number | null;
        };
        HeadingsMaxAggregateOutputType: {
            created?: null | string;
            id?: null | string;
            name?: null | string;
            updated?: null | string;
            day?: null | string;
            active?: null | boolean;
            heading_number?: string | number | null;
        };
        StocksCountAggregateOutputType: {
            bank_name: number;
            created: number;
            id: number;
            updated: number;
            _all: number;
        };
        StocksMinAggregateOutputType: {
            bank_name?: null | string;
            created?: null | string;
            id?: null | string;
            updated?: null | string;
        };
        StocksMaxAggregateOutputType: {
            bank_name?: null | string;
            created?: null | string;
            id?: null | string;
            updated?: null | string;
        };
        Stocks_headingsCountAggregateOutputType: {
            created: number;
            headings: number;
            id: number;
            stocks: number;
            updated: number;
            previous_price: number;
            current_price: number;
            change_in_price: number;
            percentage_change_in_price: number;
            _all: number;
        };
        Stocks_headingsAvgAggregateOutputType: {
            previous_price?: string | number | null;
            current_price?: string | number | null;
            change_in_price?: string | number | null;
        };
        Stocks_headingsSumAggregateOutputType: {
            previous_price?: string | number | null;
            current_price?: string | number | null;
            change_in_price?: string | number | null;
        };
        Stocks_headingsMinAggregateOutputType: {
            created?: null | string;
            headings?: null | string;
            id?: null | string;
            stocks?: null | string;
            updated?: null | string;
            previous_price?: string | number | null;
            current_price?: string | number | null;
            change_in_price?: string | number | null;
            percentage_change_in_price?: null | string;
        };
        Stocks_headingsMaxAggregateOutputType: {
            created?: null | string;
            headings?: null | string;
            id?: null | string;
            stocks?: null | string;
            updated?: null | string;
            previous_price?: string | number | null;
            current_price?: string | number | null;
            change_in_price?: string | number | null;
            percentage_change_in_price?: null | string;
        };
        Stocks_usersCountAggregateOutputType: {
            created: number;
            id: number;
            stocks: number;
            updated: number;
            users: number;
            share_count: number;
            balance_when_shorting: number;
            short_share_count: number;
            _all: number;
        };
        Stocks_usersMinAggregateOutputType: {
            created?: null | string;
            id?: null | string;
            stocks?: null | string;
            updated?: null | string;
            users?: null | string;
            share_count?: null | string;
            balance_when_shorting?: null | string;
            short_share_count?: null | string;
        };
        Stocks_usersMaxAggregateOutputType: {
            created?: null | string;
            id?: null | string;
            stocks?: null | string;
            updated?: null | string;
            users?: null | string;
            share_count?: null | string;
            balance_when_shorting?: null | string;
            short_share_count?: null | string;
        };
        TimerCountAggregateOutputType: {
            active: number;
            competition_end: number;
            competition_start: number;
            created: number;
            id: number;
            updated: number;
            round_time: number;
            _all: number;
        };
        TimerAvgAggregateOutputType: {
            round_time?: string | number | null;
        };
        TimerSumAggregateOutputType: {
            round_time?: string | number | null;
        };
        TimerMinAggregateOutputType: {
            active?: null | boolean;
            competition_end?: null | string;
            competition_start?: null | string;
            created?: null | string;
            id?: null | string;
            updated?: null | string;
            round_time?: string | number | null;
        };
        TimerMaxAggregateOutputType: {
            active?: null | boolean;
            competition_end?: null | string;
            competition_start?: null | string;
            created?: null | string;
            id?: null | string;
            updated?: null | string;
            round_time?: string | number | null;
        };
        UsersCountAggregateOutputType: {
            avatar: number;
            created: number;
            email: number;
            emailVisibility: number;
            id: number;
            name: number;
            password: number;
            tokenKey: number;
            updated: number;
            username: number;
            verified: number;
            type: number;
            wallet: number;
            _all: number;
        };
        UsersMinAggregateOutputType: {
            avatar?: null | string;
            created?: null | string;
            email?: null | string;
            emailVisibility?: null | boolean;
            id?: null | string;
            name?: null | string;
            password?: null | string;
            tokenKey?: null | string;
            updated?: null | string;
            username?: null | string;
            verified?: null | boolean;
            type?: null | string;
            wallet?: null | string;
        };
        UsersMaxAggregateOutputType: {
            avatar?: null | string;
            created?: null | string;
            email?: null | string;
            emailVisibility?: null | boolean;
            id?: null | string;
            name?: null | string;
            password?: null | string;
            tokenKey?: null | string;
            updated?: null | string;
            username?: null | string;
            verified?: null | boolean;
            type?: null | string;
            wallet?: null | string;
        };
        SessionCountAggregateOutputType: {
            id: number;
            userId: number;
            expiresAt: number;
            _all: number;
        };
        SessionMinAggregateOutputType: {
            id?: null | string;
            userId?: null | string;
            expiresAt?: null | string;
        };
        SessionMaxAggregateOutputType: {
            id?: null | string;
            userId?: null | string;
            expiresAt?: null | string;
        };
        /** @description Meta information about the request or response */
        _Meta: {
            /** @description Serialization metadata */
            serialization?: unknown;
        } & {
            [key: string]: unknown;
        };
        _Error: {
            error: {
                /** @description Indicates if the error occurred during a Prisma call */
                prisma?: boolean;
                /** @description Indicates if the error was due to rejection by a policy */
                rejectedByPolicy?: boolean;
                /** @description Prisma error code. Only available when "prisma" field is true. */
                code?: string;
                /** @description Error message */
                message: string;
                /** @description Detailed error reason */
                reason?: string;
                /** @description Zod validation errors if the error is due to data validation failure */
                zodErrors?: {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: unknown;
            };
        };
        BatchPayload: {
            count?: number;
        };
        CompetitionCreateArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            data: components["schemas"]["CompetitionCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionCreateManyArgs: {
            data: components["schemas"]["CompetitionCreateManyInput"] | components["schemas"]["CompetitionCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionFindUniqueArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where: components["schemas"]["CompetitionWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionFindFirstArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where?: components["schemas"]["CompetitionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionFindManyArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where?: components["schemas"]["CompetitionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionUpdateArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where: components["schemas"]["CompetitionWhereUniqueInput"];
            data: components["schemas"]["CompetitionUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionUpdateManyArgs: {
            where?: components["schemas"]["CompetitionWhereInput"];
            data: components["schemas"]["CompetitionUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionUpsertArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where: components["schemas"]["CompetitionWhereUniqueInput"];
            create: components["schemas"]["CompetitionCreateInput"];
            update: components["schemas"]["CompetitionUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionDeleteUniqueArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where: components["schemas"]["CompetitionWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionDeleteManyArgs: {
            where?: components["schemas"]["CompetitionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionCountArgs: {
            select?: components["schemas"]["CompetitionSelect"];
            where?: components["schemas"]["CompetitionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionAggregateArgs: {
            where?: components["schemas"]["CompetitionWhereInput"];
            orderBy?: components["schemas"]["CompetitionOrderByWithRelationInput"];
            cursor?: components["schemas"]["CompetitionWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        CompetitionGroupByArgs: {
            where?: components["schemas"]["CompetitionWhereInput"];
            orderBy?: components["schemas"]["CompetitionOrderByWithRelationInput"];
            by?: components["schemas"]["CompetitionScalarFieldEnum"];
            having?: components["schemas"]["CompetitionScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        DaysCreateArgs: {
            select?: components["schemas"]["DaysSelect"];
            data: components["schemas"]["DaysCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysCreateManyArgs: {
            data: components["schemas"]["DaysCreateManyInput"] | components["schemas"]["DaysCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        DaysFindUniqueArgs: {
            select?: components["schemas"]["DaysSelect"];
            where: components["schemas"]["DaysWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysFindFirstArgs: {
            select?: components["schemas"]["DaysSelect"];
            where?: components["schemas"]["DaysWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysFindManyArgs: {
            select?: components["schemas"]["DaysSelect"];
            where?: components["schemas"]["DaysWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysUpdateArgs: {
            select?: components["schemas"]["DaysSelect"];
            where: components["schemas"]["DaysWhereUniqueInput"];
            data: components["schemas"]["DaysUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysUpdateManyArgs: {
            where?: components["schemas"]["DaysWhereInput"];
            data: components["schemas"]["DaysUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysUpsertArgs: {
            select?: components["schemas"]["DaysSelect"];
            where: components["schemas"]["DaysWhereUniqueInput"];
            create: components["schemas"]["DaysCreateInput"];
            update: components["schemas"]["DaysUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysDeleteUniqueArgs: {
            select?: components["schemas"]["DaysSelect"];
            where: components["schemas"]["DaysWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysDeleteManyArgs: {
            where?: components["schemas"]["DaysWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysCountArgs: {
            select?: components["schemas"]["DaysSelect"];
            where?: components["schemas"]["DaysWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        DaysAggregateArgs: {
            where?: components["schemas"]["DaysWhereInput"];
            orderBy?: components["schemas"]["DaysOrderByWithRelationInput"];
            cursor?: components["schemas"]["DaysWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        DaysGroupByArgs: {
            where?: components["schemas"]["DaysWhereInput"];
            orderBy?: components["schemas"]["DaysOrderByWithRelationInput"];
            by?: components["schemas"]["DaysScalarFieldEnum"];
            having?: components["schemas"]["DaysScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsCreateArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            data: components["schemas"]["HeadingsCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsCreateManyArgs: {
            data: components["schemas"]["HeadingsCreateManyInput"] | components["schemas"]["HeadingsCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsFindUniqueArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where: components["schemas"]["HeadingsWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsFindFirstArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where?: components["schemas"]["HeadingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsFindManyArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where?: components["schemas"]["HeadingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsUpdateArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where: components["schemas"]["HeadingsWhereUniqueInput"];
            data: components["schemas"]["HeadingsUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsUpdateManyArgs: {
            where?: components["schemas"]["HeadingsWhereInput"];
            data: components["schemas"]["HeadingsUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsUpsertArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where: components["schemas"]["HeadingsWhereUniqueInput"];
            create: components["schemas"]["HeadingsCreateInput"];
            update: components["schemas"]["HeadingsUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsDeleteUniqueArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where: components["schemas"]["HeadingsWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsDeleteManyArgs: {
            where?: components["schemas"]["HeadingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsCountArgs: {
            select?: components["schemas"]["HeadingsSelect"];
            where?: components["schemas"]["HeadingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsAggregateArgs: {
            where?: components["schemas"]["HeadingsWhereInput"];
            orderBy?: components["schemas"]["HeadingsOrderByWithRelationInput"];
            cursor?: components["schemas"]["HeadingsWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        HeadingsGroupByArgs: {
            where?: components["schemas"]["HeadingsWhereInput"];
            orderBy?: components["schemas"]["HeadingsOrderByWithRelationInput"];
            by?: components["schemas"]["HeadingsScalarFieldEnum"];
            having?: components["schemas"]["HeadingsScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        StocksCreateArgs: {
            select?: components["schemas"]["StocksSelect"];
            data: components["schemas"]["StocksCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksCreateManyArgs: {
            data: components["schemas"]["StocksCreateManyInput"] | components["schemas"]["StocksCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        StocksFindUniqueArgs: {
            select?: components["schemas"]["StocksSelect"];
            where: components["schemas"]["StocksWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksFindFirstArgs: {
            select?: components["schemas"]["StocksSelect"];
            where?: components["schemas"]["StocksWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksFindManyArgs: {
            select?: components["schemas"]["StocksSelect"];
            where?: components["schemas"]["StocksWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksUpdateArgs: {
            select?: components["schemas"]["StocksSelect"];
            where: components["schemas"]["StocksWhereUniqueInput"];
            data: components["schemas"]["StocksUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksUpdateManyArgs: {
            where?: components["schemas"]["StocksWhereInput"];
            data: components["schemas"]["StocksUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksUpsertArgs: {
            select?: components["schemas"]["StocksSelect"];
            where: components["schemas"]["StocksWhereUniqueInput"];
            create: components["schemas"]["StocksCreateInput"];
            update: components["schemas"]["StocksUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksDeleteUniqueArgs: {
            select?: components["schemas"]["StocksSelect"];
            where: components["schemas"]["StocksWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksDeleteManyArgs: {
            where?: components["schemas"]["StocksWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksCountArgs: {
            select?: components["schemas"]["StocksSelect"];
            where?: components["schemas"]["StocksWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        StocksAggregateArgs: {
            where?: components["schemas"]["StocksWhereInput"];
            orderBy?: components["schemas"]["StocksOrderByWithRelationInput"];
            cursor?: components["schemas"]["StocksWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        StocksGroupByArgs: {
            where?: components["schemas"]["StocksWhereInput"];
            orderBy?: components["schemas"]["StocksOrderByWithRelationInput"];
            by?: components["schemas"]["StocksScalarFieldEnum"];
            having?: components["schemas"]["StocksScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsCreateArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            data: components["schemas"]["Stocks_headingsCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsCreateManyArgs: {
            data: components["schemas"]["Stocks_headingsCreateManyInput"] | components["schemas"]["Stocks_headingsCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsFindUniqueArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where: components["schemas"]["Stocks_headingsWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsFindFirstArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsFindManyArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsUpdateArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where: components["schemas"]["Stocks_headingsWhereUniqueInput"];
            data: components["schemas"]["Stocks_headingsUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsUpdateManyArgs: {
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            data: components["schemas"]["Stocks_headingsUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsUpsertArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where: components["schemas"]["Stocks_headingsWhereUniqueInput"];
            create: components["schemas"]["Stocks_headingsCreateInput"];
            update: components["schemas"]["Stocks_headingsUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsDeleteUniqueArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where: components["schemas"]["Stocks_headingsWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsDeleteManyArgs: {
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsCountArgs: {
            select?: components["schemas"]["Stocks_headingsSelect"];
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsAggregateArgs: {
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            orderBy?: components["schemas"]["Stocks_headingsOrderByWithRelationInput"];
            cursor?: components["schemas"]["Stocks_headingsWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_headingsGroupByArgs: {
            where?: components["schemas"]["Stocks_headingsWhereInput"];
            orderBy?: components["schemas"]["Stocks_headingsOrderByWithRelationInput"];
            by?: components["schemas"]["Stocks_headingsScalarFieldEnum"];
            having?: components["schemas"]["Stocks_headingsScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersCreateArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            data: components["schemas"]["Stocks_usersCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersCreateManyArgs: {
            data: components["schemas"]["Stocks_usersCreateManyInput"] | components["schemas"]["Stocks_usersCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersFindUniqueArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where: components["schemas"]["Stocks_usersWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersFindFirstArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where?: components["schemas"]["Stocks_usersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersFindManyArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where?: components["schemas"]["Stocks_usersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersUpdateArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where: components["schemas"]["Stocks_usersWhereUniqueInput"];
            data: components["schemas"]["Stocks_usersUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersUpdateManyArgs: {
            where?: components["schemas"]["Stocks_usersWhereInput"];
            data: components["schemas"]["Stocks_usersUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersUpsertArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where: components["schemas"]["Stocks_usersWhereUniqueInput"];
            create: components["schemas"]["Stocks_usersCreateInput"];
            update: components["schemas"]["Stocks_usersUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersDeleteUniqueArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where: components["schemas"]["Stocks_usersWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersDeleteManyArgs: {
            where?: components["schemas"]["Stocks_usersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersCountArgs: {
            select?: components["schemas"]["Stocks_usersSelect"];
            where?: components["schemas"]["Stocks_usersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersAggregateArgs: {
            where?: components["schemas"]["Stocks_usersWhereInput"];
            orderBy?: components["schemas"]["Stocks_usersOrderByWithRelationInput"];
            cursor?: components["schemas"]["Stocks_usersWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        Stocks_usersGroupByArgs: {
            where?: components["schemas"]["Stocks_usersWhereInput"];
            orderBy?: components["schemas"]["Stocks_usersOrderByWithRelationInput"];
            by?: components["schemas"]["Stocks_usersScalarFieldEnum"];
            having?: components["schemas"]["Stocks_usersScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        TimerCreateArgs: {
            select?: components["schemas"]["TimerSelect"];
            data: components["schemas"]["TimerCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerCreateManyArgs: {
            data: components["schemas"]["TimerCreateManyInput"] | components["schemas"]["TimerCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        TimerFindUniqueArgs: {
            select?: components["schemas"]["TimerSelect"];
            where: components["schemas"]["TimerWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerFindFirstArgs: {
            select?: components["schemas"]["TimerSelect"];
            where?: components["schemas"]["TimerWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerFindManyArgs: {
            select?: components["schemas"]["TimerSelect"];
            where?: components["schemas"]["TimerWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerUpdateArgs: {
            select?: components["schemas"]["TimerSelect"];
            where: components["schemas"]["TimerWhereUniqueInput"];
            data: components["schemas"]["TimerUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerUpdateManyArgs: {
            where?: components["schemas"]["TimerWhereInput"];
            data: components["schemas"]["TimerUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerUpsertArgs: {
            select?: components["schemas"]["TimerSelect"];
            where: components["schemas"]["TimerWhereUniqueInput"];
            create: components["schemas"]["TimerCreateInput"];
            update: components["schemas"]["TimerUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerDeleteUniqueArgs: {
            select?: components["schemas"]["TimerSelect"];
            where: components["schemas"]["TimerWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerDeleteManyArgs: {
            where?: components["schemas"]["TimerWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerCountArgs: {
            select?: components["schemas"]["TimerSelect"];
            where?: components["schemas"]["TimerWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        TimerAggregateArgs: {
            where?: components["schemas"]["TimerWhereInput"];
            orderBy?: components["schemas"]["TimerOrderByWithRelationInput"];
            cursor?: components["schemas"]["TimerWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        TimerGroupByArgs: {
            where?: components["schemas"]["TimerWhereInput"];
            orderBy?: components["schemas"]["TimerOrderByWithRelationInput"];
            by?: components["schemas"]["TimerScalarFieldEnum"];
            having?: components["schemas"]["TimerScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        UsersCreateArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            data: components["schemas"]["UsersCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersCreateManyArgs: {
            data: components["schemas"]["UsersCreateManyInput"] | components["schemas"]["UsersCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        UsersFindUniqueArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where: components["schemas"]["UsersWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersFindFirstArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where?: components["schemas"]["UsersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersFindManyArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where?: components["schemas"]["UsersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersUpdateArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where: components["schemas"]["UsersWhereUniqueInput"];
            data: components["schemas"]["UsersUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersUpdateManyArgs: {
            where?: components["schemas"]["UsersWhereInput"];
            data: components["schemas"]["UsersUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersUpsertArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where: components["schemas"]["UsersWhereUniqueInput"];
            create: components["schemas"]["UsersCreateInput"];
            update: components["schemas"]["UsersUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersDeleteUniqueArgs: {
            select?: components["schemas"]["UsersSelect"];
            include?: components["schemas"]["UsersInclude"];
            where: components["schemas"]["UsersWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersDeleteManyArgs: {
            where?: components["schemas"]["UsersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersCountArgs: {
            select?: components["schemas"]["UsersSelect"];
            where?: components["schemas"]["UsersWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UsersAggregateArgs: {
            where?: components["schemas"]["UsersWhereInput"];
            orderBy?: components["schemas"]["UsersOrderByWithRelationInput"];
            cursor?: components["schemas"]["UsersWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        UsersGroupByArgs: {
            where?: components["schemas"]["UsersWhereInput"];
            orderBy?: components["schemas"]["UsersOrderByWithRelationInput"];
            by?: components["schemas"]["UsersScalarFieldEnum"];
            having?: components["schemas"]["UsersScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        SessionCreateArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            data: components["schemas"]["SessionCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionCreateManyArgs: {
            data: components["schemas"]["SessionCreateManyInput"] | components["schemas"]["SessionCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        SessionFindUniqueArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where: components["schemas"]["SessionWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionFindFirstArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where?: components["schemas"]["SessionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionFindManyArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where?: components["schemas"]["SessionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionUpdateArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where: components["schemas"]["SessionWhereUniqueInput"];
            data: components["schemas"]["SessionUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionUpdateManyArgs: {
            where?: components["schemas"]["SessionWhereInput"];
            data: components["schemas"]["SessionUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionUpsertArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where: components["schemas"]["SessionWhereUniqueInput"];
            create: components["schemas"]["SessionCreateInput"];
            update: components["schemas"]["SessionUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionDeleteUniqueArgs: {
            select?: components["schemas"]["SessionSelect"];
            include?: components["schemas"]["SessionInclude"];
            where: components["schemas"]["SessionWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionDeleteManyArgs: {
            where?: components["schemas"]["SessionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionCountArgs: {
            select?: components["schemas"]["SessionSelect"];
            where?: components["schemas"]["SessionWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        SessionAggregateArgs: {
            where?: components["schemas"]["SessionWhereInput"];
            orderBy?: components["schemas"]["SessionOrderByWithRelationInput"];
            cursor?: components["schemas"]["SessionWhereUniqueInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
        SessionGroupByArgs: {
            where?: components["schemas"]["SessionWhereInput"];
            orderBy?: components["schemas"]["SessionOrderByWithRelationInput"];
            by?: components["schemas"]["SessionScalarFieldEnum"];
            having?: components["schemas"]["SessionScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            meta?: components["schemas"]["_Meta"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createCompetition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompetitionCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyCompetition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompetitionCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateCompetition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompetitionUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyCompetition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompetitionUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertCompetition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompetitionUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Competition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["CompetitionCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateCompetition"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByCompetition: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["CompetitionGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DaysCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DaysCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DaysUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DaysUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DaysUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Days"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["DaysCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateDays"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByDays: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["DaysGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createHeadings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HeadingsCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyHeadings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HeadingsCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateHeadings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HeadingsUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyHeadings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HeadingsUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertHeadings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HeadingsUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["HeadingsCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateHeadings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByHeadings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["HeadingsGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createStocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StocksCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyStocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StocksCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateStocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StocksUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyStocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StocksUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertStocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StocksUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["StocksCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateStocks"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByStocks: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["StocksGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createStocks_headings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_headingsCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyStocks_headings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_headingsCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateStocks_headings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_headingsUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyStocks_headings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_headingsUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertStocks_headings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_headingsUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["Stocks_headingsCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateStocks_headings"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByStocks_headings: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_headingsGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createStocks_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_usersCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyStocks_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_usersCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateStocks_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_usersUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyStocks_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_usersUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertStocks_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Stocks_usersUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["Stocks_usersCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateStocks_users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByStocks_users: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Stocks_usersGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Timer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["TimerCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateTimer"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByTimer: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["TimerGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Users"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["UsersCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateUsers"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByUsers: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["UsersGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManySession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueSession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstSession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManySession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManySession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteSession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Session"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManySession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countSession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["SessionCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateSession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateSession"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupBySession: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["SessionGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
}
