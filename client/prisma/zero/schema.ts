// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define tables

export const competitionTable = table("competition")
  .columns({
    active: boolean(),
    created: number(),
    id: string(),
    pause: boolean(),
    updated: number(),
    ended: boolean(),
  })
  .primaryKey("id");

export const daysTable = table("days")
  .columns({
    created: number(),
    description: string(),
    id: string(),
    name: string(),
    updated: number(),
    active: boolean(),
  })
  .primaryKey("id");

export const headingsTable = table("headings")
  .columns({
    created: number(),
    id: string(),
    name: string(),
    updated: number(),
    day: string(),
    active: boolean(),
    heading_number: number(),
  })
  .primaryKey("id");

export const stocksTable = table("stocks")
  .columns({
    bank_name: string(),
    created: number(),
    id: string(),
    updated: number(),
  })
  .primaryKey("id");

export const stocks_headingsTable = table("stocks_headings")
  .columns({
    created: number(),
    headings: string(),
    id: string(),
    stocks: string(),
    updated: number(),
    previous_price: number(),
    current_price: number(),
    change_in_price: number(),
    percentage_change_in_price: string(),
  })
  .primaryKey("id");

export const stocks_usersTable = table("stocks_users")
  .columns({
    created: number(),
    id: string(),
    stocks: string(),
    updated: number(),
    users: string(),
    share_count: string(),
    balance_when_shorting: string(),
    short_share_count: string(),
  })
  .primaryKey("id");

export const timerTable = table("timer")
  .columns({
    active: boolean(),
    competition_end: string(),
    competition_start: string(),
    created: number(),
    id: string(),
    updated: number(),
    round_time: number(),
  })
  .primaryKey("id");

export const usersTable = table("users")
  .columns({
    avatar: string(),
    created: number(),
    email: string(),
    emailVisibility: boolean(),
    id: string(),
    name: string(),
    password: string(),
    tokenKey: string(),
    updated: number(),
    username: string(),
    verified: boolean(),
    type: string(),
    wallet: string(),
  })
  .primaryKey("id");

export const sessionTable = table("session")
  .columns({
    id: string(),
    userId: string(),
    expiresAt: string(),
  })
  .primaryKey("id");


// Define relationships

export const usersTableRelationships = relationships(usersTable, ({ many }) => ({
  session: many({
    sourceField: ["id"],
    destField: ["userId"],
    destSchema: sessionTable,
  })
}));


export const sessionTableRelationships = relationships(sessionTable, ({ one }) => ({
  user: one({
    sourceField: ["userId"],
    destField: ["id"],
    destSchema: usersTable,
  })
}));

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      competitionTable,
      daysTable,
      headingsTable,
      stocksTable,
      stocks_headingsTable,
      stocks_usersTable,
      timerTable,
      usersTable,
      sessionTable,
    ],
    relationships: [
      usersTableRelationships,
      sessionTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type competition = Row<typeof schema.tables.competition>;
export type days = Row<typeof schema.tables.days>;
export type headings = Row<typeof schema.tables.headings>;
export type stocks = Row<typeof schema.tables.stocks>;
export type stocks_headings = Row<typeof schema.tables.stocks_headings>;
export type stocks_users = Row<typeof schema.tables.stocks_users>;
export type timer = Row<typeof schema.tables.timer>;
export type users = Row<typeof schema.tables.users>;
export type session = Row<typeof schema.tables.session>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 4fcd11777d09c3b5cb603e8b5442c68b0db54abaaedeb4f6c68dde91f0369961
