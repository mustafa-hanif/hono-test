openapi: 3.1.0
info:
  title: Stock
  version: 1.0.0
tags:
  - name: competition
    description: competition operations
  - name: days
    description: days operations
  - name: headings
    description: headings operations
  - name: stocks
    description: stocks operations
  - name: stocks_headings
    description: stocks_headings operations
  - name: stocks_users
    description: stocks_users operations
  - name: timer
    description: timer operations
  - name: users
    description: users operations
  - name: session
    description: session operations
components:
  schemas:
    CompetitionScalarFieldEnum:
      type: string
      enum:
        - active
        - created
        - id
        - pause
        - updated
        - ended
    DaysScalarFieldEnum:
      type: string
      enum:
        - created
        - description
        - id
        - name
        - updated
        - active
    HeadingsScalarFieldEnum:
      type: string
      enum:
        - created
        - id
        - name
        - updated
        - day
        - active
        - heading_number
    StocksScalarFieldEnum:
      type: string
      enum:
        - bank_name
        - created
        - id
        - updated
    Stocks_headingsScalarFieldEnum:
      type: string
      enum:
        - created
        - headings
        - id
        - stocks
        - updated
        - previous_price
        - current_price
        - change_in_price
        - percentage_change_in_price
    Stocks_usersScalarFieldEnum:
      type: string
      enum:
        - created
        - id
        - stocks
        - updated
        - users
        - share_count
        - balance_when_shorting
        - short_share_count
    TimerScalarFieldEnum:
      type: string
      enum:
        - active
        - competition_end
        - competition_start
        - created
        - id
        - updated
        - round_time
    UsersScalarFieldEnum:
      type: string
      enum:
        - avatar
        - created
        - email
        - emailVisibility
        - id
        - name
        - password
        - tokenKey
        - updated
        - username
        - verified
        - type
        - wallet
    SessionScalarFieldEnum:
      type: string
      enum:
        - id
        - userId
        - expiresAt
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    Competition:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: string
        id:
          type: string
        pause:
          type: boolean
        updated:
          type: string
        ended:
          type: boolean
      required:
        - active
        - created
        - id
        - pause
        - updated
        - ended
    Days:
      type: object
      properties:
        created:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        active:
          type: boolean
      required:
        - created
        - description
        - id
        - name
        - updated
        - active
    Headings:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        day:
          type: string
        active:
          type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
      required:
        - created
        - id
        - name
        - updated
        - day
        - active
        - heading_number
    Stocks:
      type: object
      properties:
        bank_name:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
      required:
        - bank_name
        - created
        - id
        - updated
    Stocks_headings:
      type: object
      properties:
        created:
          type: string
        headings:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
        current_price:
          oneOf:
            - type: string
            - type: number
        change_in_price:
          oneOf:
            - type: string
            - type: number
        percentage_change_in_price:
          type: string
      required:
        - created
        - headings
        - id
        - stocks
        - updated
        - previous_price
        - current_price
        - change_in_price
        - percentage_change_in_price
    Stocks_users:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        users:
          type: string
        share_count:
          type: string
        balance_when_shorting:
          type: string
        short_share_count:
          type: string
      required:
        - created
        - id
        - stocks
        - updated
        - users
        - share_count
        - balance_when_shorting
        - short_share_count
    Timer:
      type: object
      properties:
        active:
          type: boolean
        competition_end:
          type: string
        competition_start:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
        round_time:
          oneOf:
            - type: string
            - type: number
      required:
        - active
        - competition_end
        - competition_start
        - created
        - id
        - updated
        - round_time
    Users:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
        session:
          type: array
          items:
            $ref: "#/components/schemas/Session"
      required:
        - avatar
        - created
        - email
        - emailVisibility
        - id
        - name
        - password
        - tokenKey
        - updated
        - username
        - verified
        - type
        - wallet
    Session:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        expiresAt:
          type: string
        user:
          $ref: "#/components/schemas/Users"
      required:
        - id
        - userId
        - expiresAt
        - user
    CompetitionWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/CompetitionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/CompetitionWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/CompetitionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionWhereInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        pause:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        ended:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
    CompetitionOrderByWithRelationInput:
      type: object
      properties:
        active:
          $ref: "#/components/schemas/SortOrder"
        created:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        pause:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        ended:
          $ref: "#/components/schemas/SortOrder"
    CompetitionWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/CompetitionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/CompetitionWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/CompetitionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionWhereInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        pause:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        ended:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
    CompetitionScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        pause:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        ended:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
    DaysWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/DaysWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/DaysWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/DaysWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        description:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
    DaysOrderByWithRelationInput:
      type: object
      properties:
        created:
          $ref: "#/components/schemas/SortOrder"
        description:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        name:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        active:
          $ref: "#/components/schemas/SortOrder"
    DaysWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/DaysWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/DaysWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/DaysWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        description:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
    DaysScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        description:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
    HeadingsWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/HeadingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/HeadingsWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/HeadingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        day:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        heading_number:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
    HeadingsOrderByWithRelationInput:
      type: object
      properties:
        created:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        name:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        day:
          $ref: "#/components/schemas/SortOrder"
        active:
          $ref: "#/components/schemas/SortOrder"
        heading_number:
          $ref: "#/components/schemas/SortOrder"
    HeadingsWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/HeadingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/HeadingsWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/HeadingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        day:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        heading_number:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
    HeadingsScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        day:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        heading_number:
          oneOf:
            - $ref: "#/components/schemas/DecimalWithAggregatesFilter"
            - oneOf:
                - type: string
                - type: number
    StocksWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/StocksWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/StocksWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/StocksWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksWhereInput"
        bank_name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    StocksOrderByWithRelationInput:
      type: object
      properties:
        bank_name:
          $ref: "#/components/schemas/SortOrder"
        created:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
    StocksWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/StocksWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/StocksWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/StocksWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksWhereInput"
        bank_name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    StocksScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
        bank_name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    Stocks_headingsWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_headingsWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        headings:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        previous_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        current_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        change_in_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        percentage_change_in_price:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    Stocks_headingsOrderByWithRelationInput:
      type: object
      properties:
        created:
          $ref: "#/components/schemas/SortOrder"
        headings:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        stocks:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        previous_price:
          $ref: "#/components/schemas/SortOrder"
        current_price:
          $ref: "#/components/schemas/SortOrder"
        change_in_price:
          $ref: "#/components/schemas/SortOrder"
        percentage_change_in_price:
          $ref: "#/components/schemas/SortOrder"
    Stocks_headingsWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_headingsWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        headings:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        previous_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        current_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        change_in_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
        percentage_change_in_price:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    Stocks_headingsScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        headings:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        previous_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalWithAggregatesFilter"
            - oneOf:
                - type: string
                - type: number
        current_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalWithAggregatesFilter"
            - oneOf:
                - type: string
                - type: number
        change_in_price:
          oneOf:
            - $ref: "#/components/schemas/DecimalWithAggregatesFilter"
            - oneOf:
                - type: string
                - type: number
        percentage_change_in_price:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    Stocks_usersWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_usersWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        users:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        share_count:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        balance_when_shorting:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        short_share_count:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    Stocks_usersOrderByWithRelationInput:
      type: object
      properties:
        created:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        stocks:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        users:
          $ref: "#/components/schemas/SortOrder"
        share_count:
          $ref: "#/components/schemas/SortOrder"
        balance_when_shorting:
          $ref: "#/components/schemas/SortOrder"
        short_share_count:
          $ref: "#/components/schemas/SortOrder"
    Stocks_usersWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_usersWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersWhereInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        users:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        share_count:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        balance_when_shorting:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        short_share_count:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    Stocks_usersScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        stocks:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        users:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        share_count:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        balance_when_shorting:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        short_share_count:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    TimerWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/TimerWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TimerWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TimerWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerWhereInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        competition_end:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        competition_start:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        round_time:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
    TimerOrderByWithRelationInput:
      type: object
      properties:
        active:
          $ref: "#/components/schemas/SortOrder"
        competition_end:
          $ref: "#/components/schemas/SortOrder"
        competition_start:
          $ref: "#/components/schemas/SortOrder"
        created:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        round_time:
          $ref: "#/components/schemas/SortOrder"
    TimerWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/TimerWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TimerWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TimerWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerWhereInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        competition_end:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        competition_start:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        round_time:
          oneOf:
            - $ref: "#/components/schemas/DecimalFilter"
            - oneOf:
                - type: string
                - type: number
    TimerScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
        active:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        competition_end:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        competition_start:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        round_time:
          oneOf:
            - $ref: "#/components/schemas/DecimalWithAggregatesFilter"
            - oneOf:
                - type: string
                - type: number
    UsersWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/UsersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UsersWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UsersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersWhereInput"
        avatar:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        email:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        emailVisibility:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        tokenKey:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        username:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        verified:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        type:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        wallet:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        session:
          $ref: "#/components/schemas/SessionListRelationFilter"
    UsersOrderByWithRelationInput:
      type: object
      properties:
        avatar:
          $ref: "#/components/schemas/SortOrder"
        created:
          $ref: "#/components/schemas/SortOrder"
        email:
          $ref: "#/components/schemas/SortOrder"
        emailVisibility:
          $ref: "#/components/schemas/SortOrder"
        id:
          $ref: "#/components/schemas/SortOrder"
        name:
          $ref: "#/components/schemas/SortOrder"
        password:
          $ref: "#/components/schemas/SortOrder"
        tokenKey:
          $ref: "#/components/schemas/SortOrder"
        updated:
          $ref: "#/components/schemas/SortOrder"
        username:
          $ref: "#/components/schemas/SortOrder"
        verified:
          $ref: "#/components/schemas/SortOrder"
        type:
          $ref: "#/components/schemas/SortOrder"
        wallet:
          $ref: "#/components/schemas/SortOrder"
        session:
          $ref: "#/components/schemas/SessionOrderByRelationAggregateInput"
    UsersWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        tokenKey:
          type: string
        username:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/UsersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UsersWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UsersWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersWhereInput"
        avatar:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        email:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        emailVisibility:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        verified:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        type:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        wallet:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        session:
          $ref: "#/components/schemas/SessionListRelationFilter"
    UsersScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
        avatar:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        created:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        email:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        emailVisibility:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        tokenKey:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        updated:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        username:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        verified:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        type:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        wallet:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    SessionWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/SessionWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        expiresAt:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        user:
          oneOf:
            - $ref: "#/components/schemas/UsersScalarRelationFilter"
            - $ref: "#/components/schemas/UsersWhereInput"
    SessionOrderByWithRelationInput:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SortOrder"
        userId:
          $ref: "#/components/schemas/SortOrder"
        expiresAt:
          $ref: "#/components/schemas/SortOrder"
        user:
          $ref: "#/components/schemas/UsersOrderByWithRelationInput"
    SessionWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/SessionWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereInput"
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        expiresAt:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        user:
          oneOf:
            - $ref: "#/components/schemas/UsersScalarRelationFilter"
            - $ref: "#/components/schemas/UsersWhereInput"
    SessionScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        expiresAt:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    CompetitionCreateInput:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: string
        id:
          type: string
        pause:
          type: boolean
        updated:
          type: string
        ended:
          type: boolean
    CompetitionUpdateInput:
      type: object
      properties:
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        pause:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        ended:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
    CompetitionCreateManyInput:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: string
        id:
          type: string
        pause:
          type: boolean
        updated:
          type: string
        ended:
          type: boolean
    CompetitionUpdateManyMutationInput:
      type: object
      properties:
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        pause:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        ended:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
    DaysCreateInput:
      type: object
      properties:
        created:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        active:
          type: boolean
    DaysUpdateInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        description:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
    DaysCreateManyInput:
      type: object
      properties:
        created:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        active:
          type: boolean
    DaysUpdateManyMutationInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        description:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
    HeadingsCreateInput:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        day:
          type: string
        active:
          type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
    HeadingsUpdateInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        day:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        heading_number:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
    HeadingsCreateManyInput:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        day:
          type: string
        active:
          type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
    HeadingsUpdateManyMutationInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        day:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        heading_number:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
    StocksCreateInput:
      type: object
      properties:
        bank_name:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
    StocksUpdateInput:
      type: object
      properties:
        bank_name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    StocksCreateManyInput:
      type: object
      properties:
        bank_name:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
    StocksUpdateManyMutationInput:
      type: object
      properties:
        bank_name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    Stocks_headingsCreateInput:
      type: object
      properties:
        created:
          type: string
        headings:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
        current_price:
          oneOf:
            - type: string
            - type: number
        change_in_price:
          oneOf:
            - type: string
            - type: number
        percentage_change_in_price:
          type: string
    Stocks_headingsUpdateInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        headings:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        stocks:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        previous_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        current_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        change_in_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        percentage_change_in_price:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    Stocks_headingsCreateManyInput:
      type: object
      properties:
        created:
          type: string
        headings:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
        current_price:
          oneOf:
            - type: string
            - type: number
        change_in_price:
          oneOf:
            - type: string
            - type: number
        percentage_change_in_price:
          type: string
    Stocks_headingsUpdateManyMutationInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        headings:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        stocks:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        previous_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        current_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        change_in_price:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
        percentage_change_in_price:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    Stocks_usersCreateInput:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        users:
          type: string
        share_count:
          type: string
        balance_when_shorting:
          type: string
        short_share_count:
          type: string
    Stocks_usersUpdateInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        stocks:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        users:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        share_count:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        balance_when_shorting:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        short_share_count:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    Stocks_usersCreateManyInput:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        users:
          type: string
        share_count:
          type: string
        balance_when_shorting:
          type: string
        short_share_count:
          type: string
    Stocks_usersUpdateManyMutationInput:
      type: object
      properties:
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        stocks:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        users:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        share_count:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        balance_when_shorting:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        short_share_count:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    TimerCreateInput:
      type: object
      properties:
        active:
          type: boolean
        competition_end:
          type: string
        competition_start:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
        round_time:
          oneOf:
            - type: string
            - type: number
    TimerUpdateInput:
      type: object
      properties:
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        competition_end:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        competition_start:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        round_time:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
    TimerCreateManyInput:
      type: object
      properties:
        active:
          type: boolean
        competition_end:
          type: string
        competition_start:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
        round_time:
          oneOf:
            - type: string
            - type: number
    TimerUpdateManyMutationInput:
      type: object
      properties:
        active:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        competition_end:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        competition_start:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        round_time:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/DecimalFieldUpdateOperationsInput"
    UsersCreateInput:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
        session:
          $ref: "#/components/schemas/SessionCreateNestedManyWithoutUserInput"
      required:
        - password
        - tokenKey
        - username
    UsersUpdateInput:
      type: object
      properties:
        avatar:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        email:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        emailVisibility:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        tokenKey:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        username:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        verified:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        type:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        wallet:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        session:
          $ref: "#/components/schemas/SessionUpdateManyWithoutUserNestedInput"
    UsersCreateManyInput:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
      required:
        - password
        - tokenKey
        - username
    UsersUpdateManyMutationInput:
      type: object
      properties:
        avatar:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        email:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        emailVisibility:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        tokenKey:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        username:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        verified:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        type:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        wallet:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    SessionCreateInput:
      type: object
      properties:
        id:
          type: string
        expiresAt:
          type: string
        user:
          $ref: "#/components/schemas/UsersCreateNestedOneWithoutSessionInput"
      required:
        - expiresAt
        - user
    SessionUpdateInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        expiresAt:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        user:
          $ref: "#/components/schemas/UsersUpdateOneRequiredWithoutSessionNestedInput"
    SessionCreateManyInput:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        expiresAt:
          type: string
      required:
        - userId
        - expiresAt
    SessionUpdateManyMutationInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        expiresAt:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    BoolFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolFilter"
    StringFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringFilter"
    BoolWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedBoolFilter"
        _max:
          $ref: "#/components/schemas/NestedBoolFilter"
    StringWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedStringFilter"
        _max:
          $ref: "#/components/schemas/NestedStringFilter"
    DecimalFilter:
      type: object
      properties:
        equals:
          oneOf:
            - type: string
            - type: number
        in:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        notIn:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        lt:
          oneOf:
            - type: string
            - type: number
        lte:
          oneOf:
            - type: string
            - type: number
        gt:
          oneOf:
            - type: string
            - type: number
        gte:
          oneOf:
            - type: string
            - type: number
        not:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/NestedDecimalFilter"
    DecimalWithAggregatesFilter:
      type: object
      properties:
        equals:
          oneOf:
            - type: string
            - type: number
        in:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        notIn:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        lt:
          oneOf:
            - type: string
            - type: number
        lte:
          oneOf:
            - type: string
            - type: number
        gt:
          oneOf:
            - type: string
            - type: number
        gte:
          oneOf:
            - type: string
            - type: number
        not:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/NestedDecimalWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _avg:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _sum:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _min:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _max:
          $ref: "#/components/schemas/NestedDecimalFilter"
    SessionListRelationFilter:
      type: object
      properties:
        every:
          $ref: "#/components/schemas/SessionWhereInput"
        some:
          $ref: "#/components/schemas/SessionWhereInput"
        none:
          $ref: "#/components/schemas/SessionWhereInput"
    SessionOrderByRelationAggregateInput:
      type: object
      properties:
        _count:
          $ref: "#/components/schemas/SortOrder"
    UsersScalarRelationFilter:
      type: object
      properties:
        is:
          $ref: "#/components/schemas/UsersWhereInput"
        isNot:
          $ref: "#/components/schemas/UsersWhereInput"
    BoolFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          type: boolean
    StringFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          type: string
    DecimalFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          oneOf:
            - type: string
            - type: number
        increment:
          oneOf:
            - type: string
            - type: number
        decrement:
          oneOf:
            - type: string
            - type: number
        multiply:
          oneOf:
            - type: string
            - type: number
        divide:
          oneOf:
            - type: string
            - type: number
    SessionCreateNestedManyWithoutUserInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
        connectOrCreate:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateOrConnectWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateOrConnectWithoutUserInput"
        createMany:
          $ref: "#/components/schemas/SessionCreateManyUserInputEnvelope"
        connect:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereUniqueInput"
    SessionUpdateManyWithoutUserNestedInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
        connectOrCreate:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateOrConnectWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateOrConnectWithoutUserInput"
        upsert:
          oneOf:
            - $ref: "#/components/schemas/SessionUpsertWithWhereUniqueWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionUpsertWithWhereUniqueWithoutUserInput"
        createMany:
          $ref: "#/components/schemas/SessionCreateManyUserInputEnvelope"
        set:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereUniqueInput"
        disconnect:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereUniqueInput"
        delete:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereUniqueInput"
        connect:
          oneOf:
            - $ref: "#/components/schemas/SessionWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/SessionUpdateWithWhereUniqueWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionUpdateWithWhereUniqueWithoutUserInput"
        updateMany:
          oneOf:
            - $ref: "#/components/schemas/SessionUpdateManyWithWhereWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionUpdateManyWithWhereWithoutUserInput"
        deleteMany:
          oneOf:
            - $ref: "#/components/schemas/SessionScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionScalarWhereInput"
    UsersCreateNestedOneWithoutSessionInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/UsersCreateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedCreateWithoutSessionInput"
        connectOrCreate:
          $ref: "#/components/schemas/UsersCreateOrConnectWithoutSessionInput"
        connect:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
    UsersUpdateOneRequiredWithoutSessionNestedInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/UsersCreateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedCreateWithoutSessionInput"
        connectOrCreate:
          $ref: "#/components/schemas/UsersCreateOrConnectWithoutSessionInput"
        upsert:
          $ref: "#/components/schemas/UsersUpsertWithoutSessionInput"
        connect:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/UsersUpdateToOneWithWhereWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUpdateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedUpdateWithoutSessionInput"
    NestedBoolFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolFilter"
    NestedStringFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringFilter"
    NestedBoolWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedBoolFilter"
        _max:
          $ref: "#/components/schemas/NestedBoolFilter"
    NestedIntFilter:
      type: object
      properties:
        equals:
          type: integer
        in:
          type: array
          items:
            type: integer
        notIn:
          type: array
          items:
            type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
        not:
          oneOf:
            - type: integer
            - $ref: "#/components/schemas/NestedIntFilter"
    NestedStringWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedStringFilter"
        _max:
          $ref: "#/components/schemas/NestedStringFilter"
    NestedDecimalFilter:
      type: object
      properties:
        equals:
          oneOf:
            - type: string
            - type: number
        in:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        notIn:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        lt:
          oneOf:
            - type: string
            - type: number
        lte:
          oneOf:
            - type: string
            - type: number
        gt:
          oneOf:
            - type: string
            - type: number
        gte:
          oneOf:
            - type: string
            - type: number
        not:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/NestedDecimalFilter"
    NestedDecimalWithAggregatesFilter:
      type: object
      properties:
        equals:
          oneOf:
            - type: string
            - type: number
        in:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        notIn:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        lt:
          oneOf:
            - type: string
            - type: number
        lte:
          oneOf:
            - type: string
            - type: number
        gt:
          oneOf:
            - type: string
            - type: number
        gte:
          oneOf:
            - type: string
            - type: number
        not:
          oneOf:
            - oneOf:
                - type: string
                - type: number
            - $ref: "#/components/schemas/NestedDecimalWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _avg:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _sum:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _min:
          $ref: "#/components/schemas/NestedDecimalFilter"
        _max:
          $ref: "#/components/schemas/NestedDecimalFilter"
    SessionCreateWithoutUserInput:
      type: object
      properties:
        id:
          type: string
        expiresAt:
          type: string
      required:
        - expiresAt
    SessionUncheckedCreateWithoutUserInput:
      type: object
      properties:
        id:
          type: string
        expiresAt:
          type: string
      required:
        - expiresAt
    SessionCreateOrConnectWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
      required:
        - where
        - create
    SessionCreateManyUserInputEnvelope:
      type: object
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateManyUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateManyUserInput"
      required:
        - data
    SessionUpsertWithWhereUniqueWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/SessionUpdateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedUpdateWithoutUserInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedCreateWithoutUserInput"
      required:
        - where
        - update
        - create
    SessionUpdateWithWhereUniqueWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/SessionUpdateWithoutUserInput"
            - $ref: "#/components/schemas/SessionUncheckedUpdateWithoutUserInput"
      required:
        - where
        - data
    SessionUpdateManyWithWhereWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionScalarWhereInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/SessionUpdateManyMutationInput"
            - $ref: "#/components/schemas/SessionUncheckedUpdateManyWithoutUserInput"
      required:
        - where
        - data
    SessionScalarWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/SessionScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionScalarWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/SessionScalarWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/SessionScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionScalarWhereInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        expiresAt:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    UsersCreateWithoutSessionInput:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
      required:
        - password
        - tokenKey
        - username
    UsersUncheckedCreateWithoutSessionInput:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
      required:
        - password
        - tokenKey
        - username
    UsersCreateOrConnectWithoutSessionInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/UsersCreateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedCreateWithoutSessionInput"
      required:
        - where
        - create
    UsersUpsertWithoutSessionInput:
      type: object
      properties:
        update:
          oneOf:
            - $ref: "#/components/schemas/UsersUpdateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedUpdateWithoutSessionInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/UsersCreateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedCreateWithoutSessionInput"
        where:
          $ref: "#/components/schemas/UsersWhereInput"
      required:
        - update
        - create
    UsersUpdateToOneWithWhereWithoutSessionInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/UsersUpdateWithoutSessionInput"
            - $ref: "#/components/schemas/UsersUncheckedUpdateWithoutSessionInput"
      required:
        - data
    UsersUpdateWithoutSessionInput:
      type: object
      properties:
        avatar:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        email:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        emailVisibility:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        tokenKey:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        username:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        verified:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        type:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        wallet:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    UsersUncheckedUpdateWithoutSessionInput:
      type: object
      properties:
        avatar:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        created:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        email:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        emailVisibility:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        tokenKey:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        updated:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        username:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        verified:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        type:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        wallet:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    SessionCreateManyUserInput:
      type: object
      properties:
        id:
          type: string
        expiresAt:
          type: string
      required:
        - expiresAt
    SessionUpdateWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        expiresAt:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    SessionUncheckedUpdateWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        expiresAt:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    SessionUncheckedUpdateManyWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        expiresAt:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    UsersDefaultArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
    UsersInclude:
      type: object
      properties:
        session:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/SessionFindManyArgs"
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UsersCountOutputTypeDefaultArgs"
    SessionInclude:
      type: object
      properties:
        user:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UsersDefaultArgs"
    UsersCountOutputTypeSelect:
      type: object
      properties:
        session:
          type: boolean
    UsersCountOutputTypeDefaultArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UsersCountOutputTypeSelect"
    CompetitionSelect:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: boolean
        id:
          type: boolean
        pause:
          type: boolean
        updated:
          type: boolean
        ended:
          type: boolean
    DaysSelect:
      type: object
      properties:
        created:
          type: boolean
        description:
          type: boolean
        id:
          type: boolean
        name:
          type: boolean
        updated:
          type: boolean
        active:
          type: boolean
    HeadingsSelect:
      type: object
      properties:
        created:
          type: boolean
        id:
          type: boolean
        name:
          type: boolean
        updated:
          type: boolean
        day:
          type: boolean
        active:
          type: boolean
        heading_number:
          type: boolean
    StocksSelect:
      type: object
      properties:
        bank_name:
          type: boolean
        created:
          type: boolean
        id:
          type: boolean
        updated:
          type: boolean
    Stocks_headingsSelect:
      type: object
      properties:
        created:
          type: boolean
        headings:
          type: boolean
        id:
          type: boolean
        stocks:
          type: boolean
        updated:
          type: boolean
        previous_price:
          type: boolean
        current_price:
          type: boolean
        change_in_price:
          type: boolean
        percentage_change_in_price:
          type: boolean
    Stocks_usersSelect:
      type: object
      properties:
        created:
          type: boolean
        id:
          type: boolean
        stocks:
          type: boolean
        updated:
          type: boolean
        users:
          type: boolean
        share_count:
          type: boolean
        balance_when_shorting:
          type: boolean
        short_share_count:
          type: boolean
    TimerSelect:
      type: object
      properties:
        active:
          type: boolean
        competition_end:
          type: boolean
        competition_start:
          type: boolean
        created:
          type: boolean
        id:
          type: boolean
        updated:
          type: boolean
        round_time:
          type: boolean
    UsersSelect:
      type: object
      properties:
        avatar:
          type: boolean
        created:
          type: boolean
        email:
          type: boolean
        emailVisibility:
          type: boolean
        id:
          type: boolean
        name:
          type: boolean
        password:
          type: boolean
        tokenKey:
          type: boolean
        updated:
          type: boolean
        username:
          type: boolean
        verified:
          type: boolean
        type:
          type: boolean
        wallet:
          type: boolean
        session:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/SessionFindManyArgs"
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UsersCountOutputTypeDefaultArgs"
    SessionSelect:
      type: object
      properties:
        id:
          type: boolean
        userId:
          type: boolean
        expiresAt:
          type: boolean
        user:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UsersDefaultArgs"
    AggregateCompetition:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionMaxAggregateOutputType"
    CompetitionGroupByOutputType:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: string
        id:
          type: string
        pause:
          type: boolean
        updated:
          type: string
        ended:
          type: boolean
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CompetitionMaxAggregateOutputType"
      required:
        - active
        - created
        - id
        - pause
        - updated
        - ended
    AggregateDays:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysMaxAggregateOutputType"
    DaysGroupByOutputType:
      type: object
      properties:
        created:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        active:
          type: boolean
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DaysMaxAggregateOutputType"
      required:
        - created
        - description
        - id
        - name
        - updated
        - active
    AggregateHeadings:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsMaxAggregateOutputType"
    HeadingsGroupByOutputType:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        name:
          type: string
        updated:
          type: string
        day:
          type: string
        active:
          type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/HeadingsMaxAggregateOutputType"
      required:
        - created
        - id
        - name
        - updated
        - day
        - active
        - heading_number
    AggregateStocks:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksMaxAggregateOutputType"
    StocksGroupByOutputType:
      type: object
      properties:
        bank_name:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/StocksMaxAggregateOutputType"
      required:
        - bank_name
        - created
        - id
        - updated
    AggregateStocks_headings:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsMaxAggregateOutputType"
    Stocks_headingsGroupByOutputType:
      type: object
      properties:
        created:
          type: string
        headings:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
        current_price:
          oneOf:
            - type: string
            - type: number
        change_in_price:
          oneOf:
            - type: string
            - type: number
        percentage_change_in_price:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_headingsMaxAggregateOutputType"
      required:
        - created
        - headings
        - id
        - stocks
        - updated
        - previous_price
        - current_price
        - change_in_price
        - percentage_change_in_price
    AggregateStocks_users:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersMaxAggregateOutputType"
    Stocks_usersGroupByOutputType:
      type: object
      properties:
        created:
          type: string
        id:
          type: string
        stocks:
          type: string
        updated:
          type: string
        users:
          type: string
        share_count:
          type: string
        balance_when_shorting:
          type: string
        short_share_count:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/Stocks_usersMaxAggregateOutputType"
      required:
        - created
        - id
        - stocks
        - updated
        - users
        - share_count
        - balance_when_shorting
        - short_share_count
    AggregateTimer:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerMaxAggregateOutputType"
    TimerGroupByOutputType:
      type: object
      properties:
        active:
          type: boolean
        competition_end:
          type: string
        competition_start:
          type: string
        created:
          type: string
        id:
          type: string
        updated:
          type: string
        round_time:
          oneOf:
            - type: string
            - type: number
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TimerMaxAggregateOutputType"
      required:
        - active
        - competition_end
        - competition_start
        - created
        - id
        - updated
        - round_time
    AggregateUsers:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersMaxAggregateOutputType"
    UsersGroupByOutputType:
      type: object
      properties:
        avatar:
          type: string
        created:
          type: string
        email:
          type: string
        emailVisibility:
          type: boolean
        id:
          type: string
        name:
          type: string
        password:
          type: string
        tokenKey:
          type: string
        updated:
          type: string
        username:
          type: string
        verified:
          type: boolean
        type:
          type: string
        wallet:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UsersMaxAggregateOutputType"
      required:
        - avatar
        - created
        - email
        - emailVisibility
        - id
        - name
        - password
        - tokenKey
        - updated
        - username
        - verified
        - type
        - wallet
    AggregateSession:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionMaxAggregateOutputType"
    SessionGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        expiresAt:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SessionMaxAggregateOutputType"
      required:
        - id
        - userId
        - expiresAt
    CompetitionCountAggregateOutputType:
      type: object
      properties:
        active:
          type: integer
        created:
          type: integer
        id:
          type: integer
        pause:
          type: integer
        updated:
          type: integer
        ended:
          type: integer
        _all:
          type: integer
      required:
        - active
        - created
        - id
        - pause
        - updated
        - ended
        - _all
    CompetitionMinAggregateOutputType:
      type: object
      properties:
        active:
          oneOf:
            - type: "null"
            - type: boolean
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        pause:
          oneOf:
            - type: "null"
            - type: boolean
        updated:
          oneOf:
            - type: "null"
            - type: string
        ended:
          oneOf:
            - type: "null"
            - type: boolean
    CompetitionMaxAggregateOutputType:
      type: object
      properties:
        active:
          oneOf:
            - type: "null"
            - type: boolean
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        pause:
          oneOf:
            - type: "null"
            - type: boolean
        updated:
          oneOf:
            - type: "null"
            - type: string
        ended:
          oneOf:
            - type: "null"
            - type: boolean
    DaysCountAggregateOutputType:
      type: object
      properties:
        created:
          type: integer
        description:
          type: integer
        id:
          type: integer
        name:
          type: integer
        updated:
          type: integer
        active:
          type: integer
        _all:
          type: integer
      required:
        - created
        - description
        - id
        - name
        - updated
        - active
        - _all
    DaysMinAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        active:
          oneOf:
            - type: "null"
            - type: boolean
    DaysMaxAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        active:
          oneOf:
            - type: "null"
            - type: boolean
    HeadingsCountAggregateOutputType:
      type: object
      properties:
        created:
          type: integer
        id:
          type: integer
        name:
          type: integer
        updated:
          type: integer
        day:
          type: integer
        active:
          type: integer
        heading_number:
          type: integer
        _all:
          type: integer
      required:
        - created
        - id
        - name
        - updated
        - day
        - active
        - heading_number
        - _all
    HeadingsAvgAggregateOutputType:
      type: object
      properties:
        heading_number:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    HeadingsSumAggregateOutputType:
      type: object
      properties:
        heading_number:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    HeadingsMinAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        day:
          oneOf:
            - type: "null"
            - type: string
        active:
          oneOf:
            - type: "null"
            - type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    HeadingsMaxAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        day:
          oneOf:
            - type: "null"
            - type: string
        active:
          oneOf:
            - type: "null"
            - type: boolean
        heading_number:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    StocksCountAggregateOutputType:
      type: object
      properties:
        bank_name:
          type: integer
        created:
          type: integer
        id:
          type: integer
        updated:
          type: integer
        _all:
          type: integer
      required:
        - bank_name
        - created
        - id
        - updated
        - _all
    StocksMinAggregateOutputType:
      type: object
      properties:
        bank_name:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
    StocksMaxAggregateOutputType:
      type: object
      properties:
        bank_name:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
    Stocks_headingsCountAggregateOutputType:
      type: object
      properties:
        created:
          type: integer
        headings:
          type: integer
        id:
          type: integer
        stocks:
          type: integer
        updated:
          type: integer
        previous_price:
          type: integer
        current_price:
          type: integer
        change_in_price:
          type: integer
        percentage_change_in_price:
          type: integer
        _all:
          type: integer
      required:
        - created
        - headings
        - id
        - stocks
        - updated
        - previous_price
        - current_price
        - change_in_price
        - percentage_change_in_price
        - _all
    Stocks_headingsAvgAggregateOutputType:
      type: object
      properties:
        previous_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        current_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        change_in_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    Stocks_headingsSumAggregateOutputType:
      type: object
      properties:
        previous_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        current_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        change_in_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    Stocks_headingsMinAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        headings:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        stocks:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        current_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        change_in_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        percentage_change_in_price:
          oneOf:
            - type: "null"
            - type: string
    Stocks_headingsMaxAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        headings:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        stocks:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        previous_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        current_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        change_in_price:
          oneOf:
            - type: string
            - type: number
            - type: "null"
        percentage_change_in_price:
          oneOf:
            - type: "null"
            - type: string
    Stocks_usersCountAggregateOutputType:
      type: object
      properties:
        created:
          type: integer
        id:
          type: integer
        stocks:
          type: integer
        updated:
          type: integer
        users:
          type: integer
        share_count:
          type: integer
        balance_when_shorting:
          type: integer
        short_share_count:
          type: integer
        _all:
          type: integer
      required:
        - created
        - id
        - stocks
        - updated
        - users
        - share_count
        - balance_when_shorting
        - short_share_count
        - _all
    Stocks_usersMinAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        stocks:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        users:
          oneOf:
            - type: "null"
            - type: string
        share_count:
          oneOf:
            - type: "null"
            - type: string
        balance_when_shorting:
          oneOf:
            - type: "null"
            - type: string
        short_share_count:
          oneOf:
            - type: "null"
            - type: string
    Stocks_usersMaxAggregateOutputType:
      type: object
      properties:
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        stocks:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        users:
          oneOf:
            - type: "null"
            - type: string
        share_count:
          oneOf:
            - type: "null"
            - type: string
        balance_when_shorting:
          oneOf:
            - type: "null"
            - type: string
        short_share_count:
          oneOf:
            - type: "null"
            - type: string
    TimerCountAggregateOutputType:
      type: object
      properties:
        active:
          type: integer
        competition_end:
          type: integer
        competition_start:
          type: integer
        created:
          type: integer
        id:
          type: integer
        updated:
          type: integer
        round_time:
          type: integer
        _all:
          type: integer
      required:
        - active
        - competition_end
        - competition_start
        - created
        - id
        - updated
        - round_time
        - _all
    TimerAvgAggregateOutputType:
      type: object
      properties:
        round_time:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    TimerSumAggregateOutputType:
      type: object
      properties:
        round_time:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    TimerMinAggregateOutputType:
      type: object
      properties:
        active:
          oneOf:
            - type: "null"
            - type: boolean
        competition_end:
          oneOf:
            - type: "null"
            - type: string
        competition_start:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        round_time:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    TimerMaxAggregateOutputType:
      type: object
      properties:
        active:
          oneOf:
            - type: "null"
            - type: boolean
        competition_end:
          oneOf:
            - type: "null"
            - type: string
        competition_start:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        id:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        round_time:
          oneOf:
            - type: string
            - type: number
            - type: "null"
    UsersCountAggregateOutputType:
      type: object
      properties:
        avatar:
          type: integer
        created:
          type: integer
        email:
          type: integer
        emailVisibility:
          type: integer
        id:
          type: integer
        name:
          type: integer
        password:
          type: integer
        tokenKey:
          type: integer
        updated:
          type: integer
        username:
          type: integer
        verified:
          type: integer
        type:
          type: integer
        wallet:
          type: integer
        _all:
          type: integer
      required:
        - avatar
        - created
        - email
        - emailVisibility
        - id
        - name
        - password
        - tokenKey
        - updated
        - username
        - verified
        - type
        - wallet
        - _all
    UsersMinAggregateOutputType:
      type: object
      properties:
        avatar:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        email:
          oneOf:
            - type: "null"
            - type: string
        emailVisibility:
          oneOf:
            - type: "null"
            - type: boolean
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
        tokenKey:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        username:
          oneOf:
            - type: "null"
            - type: string
        verified:
          oneOf:
            - type: "null"
            - type: boolean
        type:
          oneOf:
            - type: "null"
            - type: string
        wallet:
          oneOf:
            - type: "null"
            - type: string
    UsersMaxAggregateOutputType:
      type: object
      properties:
        avatar:
          oneOf:
            - type: "null"
            - type: string
        created:
          oneOf:
            - type: "null"
            - type: string
        email:
          oneOf:
            - type: "null"
            - type: string
        emailVisibility:
          oneOf:
            - type: "null"
            - type: boolean
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
        tokenKey:
          oneOf:
            - type: "null"
            - type: string
        updated:
          oneOf:
            - type: "null"
            - type: string
        username:
          oneOf:
            - type: "null"
            - type: string
        verified:
          oneOf:
            - type: "null"
            - type: boolean
        type:
          oneOf:
            - type: "null"
            - type: string
        wallet:
          oneOf:
            - type: "null"
            - type: string
    SessionCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        expiresAt:
          type: integer
        _all:
          type: integer
      required:
        - id
        - userId
        - expiresAt
        - _all
    SessionMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        userId:
          oneOf:
            - type: "null"
            - type: string
        expiresAt:
          oneOf:
            - type: "null"
            - type: string
    SessionMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        userId:
          oneOf:
            - type: "null"
            - type: string
        expiresAt:
          oneOf:
            - type: "null"
            - type: string
    _Meta:
      type: object
      description: Meta information about the request or response
      properties:
        serialization:
          description: Serialization metadata
      additionalProperties: true
    _Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            prisma:
              type: boolean
              description: Indicates if the error occurred during a Prisma call
            rejectedByPolicy:
              type: boolean
              description: Indicates if the error was due to rejection by a policy
            code:
              type: string
              description: Prisma error code. Only available when "prisma" field is true.
            message:
              type: string
              description: Error message
            reason:
              type: string
              description: Detailed error reason
            zodErrors:
              type: object
              additionalProperties: true
              description: Zod validation errors if the error is due to data validation
                failure
          additionalProperties: true
    BatchPayload:
      type: object
      properties:
        count:
          type: integer
    CompetitionCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        data:
          $ref: "#/components/schemas/CompetitionCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/CompetitionCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/CompetitionCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereUniqueInput"
        data:
          $ref: "#/components/schemas/CompetitionUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        data:
          $ref: "#/components/schemas/CompetitionUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereUniqueInput"
        create:
          $ref: "#/components/schemas/CompetitionCreateInput"
        update:
          $ref: "#/components/schemas/CompetitionUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/CompetitionSelect"
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        orderBy:
          $ref: "#/components/schemas/CompetitionOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/CompetitionWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    CompetitionGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/CompetitionWhereInput"
        orderBy:
          $ref: "#/components/schemas/CompetitionOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/CompetitionScalarFieldEnum"
        having:
          $ref: "#/components/schemas/CompetitionScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        data:
          $ref: "#/components/schemas/DaysCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/DaysCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/DaysCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereUniqueInput"
        data:
          $ref: "#/components/schemas/DaysUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        data:
          $ref: "#/components/schemas/DaysUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereUniqueInput"
        create:
          $ref: "#/components/schemas/DaysCreateInput"
        update:
          $ref: "#/components/schemas/DaysUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/DaysSelect"
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        orderBy:
          $ref: "#/components/schemas/DaysOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/DaysWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    DaysGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/DaysWhereInput"
        orderBy:
          $ref: "#/components/schemas/DaysOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/DaysScalarFieldEnum"
        having:
          $ref: "#/components/schemas/DaysScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        data:
          $ref: "#/components/schemas/HeadingsCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/HeadingsCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/HeadingsCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereUniqueInput"
        data:
          $ref: "#/components/schemas/HeadingsUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        data:
          $ref: "#/components/schemas/HeadingsUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereUniqueInput"
        create:
          $ref: "#/components/schemas/HeadingsCreateInput"
        update:
          $ref: "#/components/schemas/HeadingsUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/HeadingsSelect"
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        orderBy:
          $ref: "#/components/schemas/HeadingsOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/HeadingsWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    HeadingsGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/HeadingsWhereInput"
        orderBy:
          $ref: "#/components/schemas/HeadingsOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/HeadingsScalarFieldEnum"
        having:
          $ref: "#/components/schemas/HeadingsScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        data:
          $ref: "#/components/schemas/StocksCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/StocksCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/StocksCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereUniqueInput"
        data:
          $ref: "#/components/schemas/StocksUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        data:
          $ref: "#/components/schemas/StocksUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereUniqueInput"
        create:
          $ref: "#/components/schemas/StocksCreateInput"
        update:
          $ref: "#/components/schemas/StocksUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/StocksSelect"
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        orderBy:
          $ref: "#/components/schemas/StocksOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/StocksWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    StocksGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/StocksWhereInput"
        orderBy:
          $ref: "#/components/schemas/StocksOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/StocksScalarFieldEnum"
        having:
          $ref: "#/components/schemas/StocksScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        data:
          $ref: "#/components/schemas/Stocks_headingsCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/Stocks_headingsCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_headingsCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereUniqueInput"
        data:
          $ref: "#/components/schemas/Stocks_headingsUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        data:
          $ref: "#/components/schemas/Stocks_headingsUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereUniqueInput"
        create:
          $ref: "#/components/schemas/Stocks_headingsCreateInput"
        update:
          $ref: "#/components/schemas/Stocks_headingsUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_headingsSelect"
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        orderBy:
          $ref: "#/components/schemas/Stocks_headingsOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/Stocks_headingsWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_headingsGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_headingsWhereInput"
        orderBy:
          $ref: "#/components/schemas/Stocks_headingsOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/Stocks_headingsScalarFieldEnum"
        having:
          $ref: "#/components/schemas/Stocks_headingsScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        data:
          $ref: "#/components/schemas/Stocks_usersCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/Stocks_usersCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/Stocks_usersCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereUniqueInput"
        data:
          $ref: "#/components/schemas/Stocks_usersUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        data:
          $ref: "#/components/schemas/Stocks_usersUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereUniqueInput"
        create:
          $ref: "#/components/schemas/Stocks_usersCreateInput"
        update:
          $ref: "#/components/schemas/Stocks_usersUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/Stocks_usersSelect"
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        orderBy:
          $ref: "#/components/schemas/Stocks_usersOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/Stocks_usersWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    Stocks_usersGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/Stocks_usersWhereInput"
        orderBy:
          $ref: "#/components/schemas/Stocks_usersOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/Stocks_usersScalarFieldEnum"
        having:
          $ref: "#/components/schemas/Stocks_usersScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        data:
          $ref: "#/components/schemas/TimerCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/TimerCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/TimerCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereUniqueInput"
        data:
          $ref: "#/components/schemas/TimerUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        data:
          $ref: "#/components/schemas/TimerUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereUniqueInput"
        create:
          $ref: "#/components/schemas/TimerCreateInput"
        update:
          $ref: "#/components/schemas/TimerUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TimerSelect"
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        orderBy:
          $ref: "#/components/schemas/TimerOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/TimerWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    TimerGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TimerWhereInput"
        orderBy:
          $ref: "#/components/schemas/TimerOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/TimerScalarFieldEnum"
        having:
          $ref: "#/components/schemas/TimerScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        data:
          $ref: "#/components/schemas/UsersCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/UsersCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/UsersCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        data:
          $ref: "#/components/schemas/UsersUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        data:
          $ref: "#/components/schemas/UsersUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        create:
          $ref: "#/components/schemas/UsersCreateInput"
        update:
          $ref: "#/components/schemas/UsersUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        include:
          $ref: "#/components/schemas/UsersInclude"
        where:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UsersSelect"
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        orderBy:
          $ref: "#/components/schemas/UsersOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/UsersWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    UsersGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UsersWhereInput"
        orderBy:
          $ref: "#/components/schemas/UsersOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/UsersScalarFieldEnum"
        having:
          $ref: "#/components/schemas/UsersScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        data:
          $ref: "#/components/schemas/SessionCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/SessionCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/SessionCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        data:
          $ref: "#/components/schemas/SessionUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        data:
          $ref: "#/components/schemas/SessionUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        create:
          $ref: "#/components/schemas/SessionCreateInput"
        update:
          $ref: "#/components/schemas/SessionUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        include:
          $ref: "#/components/schemas/SessionInclude"
        where:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/SessionSelect"
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        orderBy:
          $ref: "#/components/schemas/SessionOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/SessionWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
    SessionGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/SessionWhereInput"
        orderBy:
          $ref: "#/components/schemas/SessionOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/SessionScalarFieldEnum"
        having:
          $ref: "#/components/schemas/SessionScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        meta:
          $ref: "#/components/schemas/_Meta"
paths:
  /competition/create:
    post:
      operationId: createCompetition
      description: Create a new Competition
      tags:
        - competition
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionCreateArgs"
  /competition/createMany:
    post:
      operationId: createManyCompetition
      description: Create several Competition
      tags:
        - competition
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionCreateManyArgs"
  /competition/findUnique:
    get:
      operationId: findUniqueCompetition
      description: Find one unique Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/findFirst:
    get:
      operationId: findFirstCompetition
      description: Find the first Competition matching the given condition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/findMany:
    get:
      operationId: findManyCompetition
      description: Find a list of Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/update:
    patch:
      operationId: updateCompetition
      description: Update a Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionUpdateArgs"
  /competition/updateMany:
    patch:
      operationId: updateManyCompetition
      description: Update Competitions matching the given condition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionUpdateManyArgs"
  /competition/upsert:
    post:
      operationId: upsertCompetition
      description: Upsert a Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompetitionUpsertArgs"
  /competition/delete:
    delete:
      operationId: deleteCompetition
      description: Delete one unique Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Competition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/deleteMany:
    delete:
      operationId: deleteManyCompetition
      description: Delete Competitions matching the given condition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/count:
    get:
      operationId: countCompetition
      description: Find a list of Competition
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/CompetitionCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/aggregate:
    get:
      operationId: aggregateCompetition
      description: Aggregate Competitions
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateCompetition"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /competition/groupBy:
    get:
      operationId: groupByCompetition
      description: Group Competitions by fields
      tags:
        - competition
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompetitionGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompetitionGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/create:
    post:
      operationId: createDays
      description: Create a new Days
      tags:
        - days
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DaysCreateArgs"
  /days/createMany:
    post:
      operationId: createManyDays
      description: Create several Days
      tags:
        - days
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DaysCreateManyArgs"
  /days/findUnique:
    get:
      operationId: findUniqueDays
      description: Find one unique Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/findFirst:
    get:
      operationId: findFirstDays
      description: Find the first Days matching the given condition
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/findMany:
    get:
      operationId: findManyDays
      description: Find a list of Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/update:
    patch:
      operationId: updateDays
      description: Update a Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DaysUpdateArgs"
  /days/updateMany:
    patch:
      operationId: updateManyDays
      description: Update Dayss matching the given condition
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DaysUpdateManyArgs"
  /days/upsert:
    post:
      operationId: upsertDays
      description: Upsert a Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DaysUpsertArgs"
  /days/delete:
    delete:
      operationId: deleteDays
      description: Delete one unique Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Days"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/deleteMany:
    delete:
      operationId: deleteManyDays
      description: Delete Dayss matching the given condition
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/count:
    get:
      operationId: countDays
      description: Find a list of Days
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/DaysCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/aggregate:
    get:
      operationId: aggregateDays
      description: Aggregate Dayss
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateDays"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /days/groupBy:
    get:
      operationId: groupByDays
      description: Group Dayss by fields
      tags:
        - days
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DaysGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DaysGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/create:
    post:
      operationId: createHeadings
      description: Create a new Headings
      tags:
        - headings
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeadingsCreateArgs"
  /headings/createMany:
    post:
      operationId: createManyHeadings
      description: Create several Headings
      tags:
        - headings
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeadingsCreateManyArgs"
  /headings/findUnique:
    get:
      operationId: findUniqueHeadings
      description: Find one unique Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/findFirst:
    get:
      operationId: findFirstHeadings
      description: Find the first Headings matching the given condition
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/findMany:
    get:
      operationId: findManyHeadings
      description: Find a list of Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/update:
    patch:
      operationId: updateHeadings
      description: Update a Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeadingsUpdateArgs"
  /headings/updateMany:
    patch:
      operationId: updateManyHeadings
      description: Update Headingss matching the given condition
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeadingsUpdateManyArgs"
  /headings/upsert:
    post:
      operationId: upsertHeadings
      description: Upsert a Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeadingsUpsertArgs"
  /headings/delete:
    delete:
      operationId: deleteHeadings
      description: Delete one unique Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/deleteMany:
    delete:
      operationId: deleteManyHeadings
      description: Delete Headingss matching the given condition
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/count:
    get:
      operationId: countHeadings
      description: Find a list of Headings
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/HeadingsCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/aggregate:
    get:
      operationId: aggregateHeadings
      description: Aggregate Headingss
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateHeadings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /headings/groupBy:
    get:
      operationId: groupByHeadings
      description: Group Headingss by fields
      tags:
        - headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HeadingsGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeadingsGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/create:
    post:
      operationId: createStocks
      description: Create a new Stocks
      tags:
        - stocks
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StocksCreateArgs"
  /stocks/createMany:
    post:
      operationId: createManyStocks
      description: Create several Stocks
      tags:
        - stocks
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StocksCreateManyArgs"
  /stocks/findUnique:
    get:
      operationId: findUniqueStocks
      description: Find one unique Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/findFirst:
    get:
      operationId: findFirstStocks
      description: Find the first Stocks matching the given condition
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/findMany:
    get:
      operationId: findManyStocks
      description: Find a list of Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/update:
    patch:
      operationId: updateStocks
      description: Update a Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StocksUpdateArgs"
  /stocks/updateMany:
    patch:
      operationId: updateManyStocks
      description: Update Stockss matching the given condition
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StocksUpdateManyArgs"
  /stocks/upsert:
    post:
      operationId: upsertStocks
      description: Upsert a Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StocksUpsertArgs"
  /stocks/delete:
    delete:
      operationId: deleteStocks
      description: Delete one unique Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/deleteMany:
    delete:
      operationId: deleteManyStocks
      description: Delete Stockss matching the given condition
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/count:
    get:
      operationId: countStocks
      description: Find a list of Stocks
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/StocksCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/aggregate:
    get:
      operationId: aggregateStocks
      description: Aggregate Stockss
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateStocks"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks/groupBy:
    get:
      operationId: groupByStocks
      description: Group Stockss by fields
      tags:
        - stocks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StocksGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StocksGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/create:
    post:
      operationId: createStocks_headings
      description: Create a new Stocks_headings
      tags:
        - stocks_headings
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_headingsCreateArgs"
  /stocks_headings/createMany:
    post:
      operationId: createManyStocks_headings
      description: Create several Stocks_headings
      tags:
        - stocks_headings
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_headingsCreateManyArgs"
  /stocks_headings/findUnique:
    get:
      operationId: findUniqueStocks_headings
      description: Find one unique Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/findFirst:
    get:
      operationId: findFirstStocks_headings
      description: Find the first Stocks_headings matching the given condition
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/findMany:
    get:
      operationId: findManyStocks_headings
      description: Find a list of Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/update:
    patch:
      operationId: updateStocks_headings
      description: Update a Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_headingsUpdateArgs"
  /stocks_headings/updateMany:
    patch:
      operationId: updateManyStocks_headings
      description: Update Stocks_headingss matching the given condition
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_headingsUpdateManyArgs"
  /stocks_headings/upsert:
    post:
      operationId: upsertStocks_headings
      description: Upsert a Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_headingsUpsertArgs"
  /stocks_headings/delete:
    delete:
      operationId: deleteStocks_headings
      description: Delete one unique Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/deleteMany:
    delete:
      operationId: deleteManyStocks_headings
      description: Delete Stocks_headingss matching the given condition
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/count:
    get:
      operationId: countStocks_headings
      description: Find a list of Stocks_headings
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/Stocks_headingsCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/aggregate:
    get:
      operationId: aggregateStocks_headings
      description: Aggregate Stocks_headingss
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateStocks_headings"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_headings/groupBy:
    get:
      operationId: groupByStocks_headings
      description: Group Stocks_headingss by fields
      tags:
        - stocks_headings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stocks_headingsGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_headingsGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/create:
    post:
      operationId: createStocks_users
      description: Create a new Stocks_users
      tags:
        - stocks_users
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_usersCreateArgs"
  /stocks_users/createMany:
    post:
      operationId: createManyStocks_users
      description: Create several Stocks_users
      tags:
        - stocks_users
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_usersCreateManyArgs"
  /stocks_users/findUnique:
    get:
      operationId: findUniqueStocks_users
      description: Find one unique Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/findFirst:
    get:
      operationId: findFirstStocks_users
      description: Find the first Stocks_users matching the given condition
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/findMany:
    get:
      operationId: findManyStocks_users
      description: Find a list of Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/update:
    patch:
      operationId: updateStocks_users
      description: Update a Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_usersUpdateArgs"
  /stocks_users/updateMany:
    patch:
      operationId: updateManyStocks_users
      description: Update Stocks_userss matching the given condition
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_usersUpdateManyArgs"
  /stocks_users/upsert:
    post:
      operationId: upsertStocks_users
      description: Upsert a Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stocks_usersUpsertArgs"
  /stocks_users/delete:
    delete:
      operationId: deleteStocks_users
      description: Delete one unique Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Stocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/deleteMany:
    delete:
      operationId: deleteManyStocks_users
      description: Delete Stocks_userss matching the given condition
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/count:
    get:
      operationId: countStocks_users
      description: Find a list of Stocks_users
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/Stocks_usersCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/aggregate:
    get:
      operationId: aggregateStocks_users
      description: Aggregate Stocks_userss
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateStocks_users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /stocks_users/groupBy:
    get:
      operationId: groupByStocks_users
      description: Group Stocks_userss by fields
      tags:
        - stocks_users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stocks_usersGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stocks_usersGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/create:
    post:
      operationId: createTimer
      description: Create a new Timer
      tags:
        - timer
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimerCreateArgs"
  /timer/createMany:
    post:
      operationId: createManyTimer
      description: Create several Timer
      tags:
        - timer
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimerCreateManyArgs"
  /timer/findUnique:
    get:
      operationId: findUniqueTimer
      description: Find one unique Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/findFirst:
    get:
      operationId: findFirstTimer
      description: Find the first Timer matching the given condition
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/findMany:
    get:
      operationId: findManyTimer
      description: Find a list of Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/update:
    patch:
      operationId: updateTimer
      description: Update a Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimerUpdateArgs"
  /timer/updateMany:
    patch:
      operationId: updateManyTimer
      description: Update Timers matching the given condition
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimerUpdateManyArgs"
  /timer/upsert:
    post:
      operationId: upsertTimer
      description: Upsert a Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimerUpsertArgs"
  /timer/delete:
    delete:
      operationId: deleteTimer
      description: Delete one unique Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Timer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/deleteMany:
    delete:
      operationId: deleteManyTimer
      description: Delete Timers matching the given condition
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/count:
    get:
      operationId: countTimer
      description: Find a list of Timer
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/TimerCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/aggregate:
    get:
      operationId: aggregateTimer
      description: Aggregate Timers
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateTimer"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /timer/groupBy:
    get:
      operationId: groupByTimer
      description: Group Timers by fields
      tags:
        - timer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimerGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimerGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/create:
    post:
      operationId: createUsers
      description: Create a new Users
      tags:
        - users
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersCreateArgs"
  /users/createMany:
    post:
      operationId: createManyUsers
      description: Create several Users
      tags:
        - users
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersCreateManyArgs"
  /users/findUnique:
    get:
      operationId: findUniqueUsers
      description: Find one unique Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/findFirst:
    get:
      operationId: findFirstUsers
      description: Find the first Users matching the given condition
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/findMany:
    get:
      operationId: findManyUsers
      description: Find a list of Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/update:
    patch:
      operationId: updateUsers
      description: Update a Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersUpdateArgs"
  /users/updateMany:
    patch:
      operationId: updateManyUsers
      description: Update Userss matching the given condition
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersUpdateManyArgs"
  /users/upsert:
    post:
      operationId: upsertUsers
      description: Upsert a Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersUpsertArgs"
  /users/delete:
    delete:
      operationId: deleteUsers
      description: Delete one unique Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/deleteMany:
    delete:
      operationId: deleteManyUsers
      description: Delete Userss matching the given condition
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/count:
    get:
      operationId: countUsers
      description: Find a list of Users
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/UsersCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/aggregate:
    get:
      operationId: aggregateUsers
      description: Aggregate Userss
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateUsers"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /users/groupBy:
    get:
      operationId: groupByUsers
      description: Group Userss by fields
      tags:
        - users
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UsersGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/create:
    post:
      operationId: createSession
      description: Create a new Session
      tags:
        - session
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionCreateArgs"
  /session/createMany:
    post:
      operationId: createManySession
      description: Create several Session
      tags:
        - session
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionCreateManyArgs"
  /session/findUnique:
    get:
      operationId: findUniqueSession
      description: Find one unique Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/findFirst:
    get:
      operationId: findFirstSession
      description: Find the first Session matching the given condition
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/findMany:
    get:
      operationId: findManySession
      description: Find a list of Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/update:
    patch:
      operationId: updateSession
      description: Update a Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionUpdateArgs"
  /session/updateMany:
    patch:
      operationId: updateManySession
      description: Update Sessions matching the given condition
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionUpdateManyArgs"
  /session/upsert:
    post:
      operationId: upsertSession
      description: Upsert a Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionUpsertArgs"
  /session/delete:
    delete:
      operationId: deleteSession
      description: Delete one unique Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Session"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/deleteMany:
    delete:
      operationId: deleteManySession
      description: Delete Sessions matching the given condition
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/count:
    get:
      operationId: countSession
      description: Find a list of Session
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/SessionCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/aggregate:
    get:
      operationId: aggregateSession
      description: Aggregate Sessions
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateSession"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /session/groupBy:
    get:
      operationId: groupBySession
      description: Group Sessions by fields
      tags:
        - session
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SessionGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
